% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate_model_data.R
\name{validate_model_data}
\alias{validate_model_data}
\title{Validate the contents of a submitted model data file}
\usage{
validate_model_data(
  hub_path,
  file_path,
  round_id_col = NULL,
  validations_cfg_path = NULL
)
}
\arguments{
\item{hub_path}{Either a character string path to a local Modeling Hub directory
or an object of class \verb{<SubTreeFileSystem>} created using functions \code{\link[hubData:s3_bucket]{s3_bucket()}}
or \code{\link[hubData:gs_bucket]{gs_bucket()}} by providing a string S3 or GCS bucket name or path to a
Modeling Hub directory stored in the cloud.
For more details consult the
\href{https://arrow.apache.org/docs/r/articles/fs.html}{Using cloud storage (S3, GCS)}
in the \code{arrow} package.
The hub must be fully configured with valid \code{admin.json} and \code{tasks.json}
files within the \code{hub-config} directory.}

\item{file_path}{character string. Path to the file being validated relative to
the hub's model-output directory.}

\item{round_id_col}{Character string. The name of the column containing
\code{round_id}s. Usually, the value of round property \code{round_id} in hub \code{tasks.json}
config file.}

\item{validations_cfg_path}{Path to \code{validations.yml} file. If \code{NULL}
defaults to \code{hub-config/validations.yml}.}
}
\value{
An object of class \code{hub_validations}. Each named element contains
a \code{hub_check} class object reflecting the result of a given check. Function
will return early if a check returns an error.

For more details on the structure of \verb{<hub_validations>} objects, including
how to access more information on individual checks,
see \href{https://infectious-disease-modeling-hubs.github.io/hubValidations/articles/hub-validations-class.html}{article on \verb{<hub_validations>} S3 class objects}.
}
\description{
Validate the contents of a submitted model data file
}
\details{
Details of checks performed by \code{validate_model_data()}\if{html}{\out{<table class="table table-striped table-hover table-condensed table-responsive" style="margin-left: auto; margin-right: auto;">}}\if{html}{\out{
 <thead>
  <tr>
   <th style="text-align:left;"> Name </th>
   <th style="text-align:left;"> Check </th>
   <th style="text-align:left;"> Early return </th>
   <th style="text-align:left;"> Fail output </th>
   <th style="text-align:left;"> Extra info </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;font-weight: bold;"> file_read </td>
   <td style="text-align:left;"> File can be read without errors </td>
   <td style="text-align:left;"> TRUE </td>
   <td style="text-align:left;"> check_error </td>
   <td style="text-align:left;">  </td>
  </tr>
  <tr>
   <td style="text-align:left;font-weight: bold;"> valid_round_id_col </td>
   <td style="text-align:left;"> Round ID var from config exists in data column names. Skipped if `round_id_from_var` is FALSE in config. </td>
   <td style="text-align:left;"> FALSE </td>
   <td style="text-align:left;"> check_failure </td>
   <td style="text-align:left;">  </td>
  </tr>
  <tr>
   <td style="text-align:left;font-weight: bold;"> unique_round_id </td>
   <td style="text-align:left;"> Round ID column contains a single unique round ID. Skipped if `round_id_from_var` is FALSE in config. </td>
   <td style="text-align:left;"> TRUE </td>
   <td style="text-align:left;"> check_error </td>
   <td style="text-align:left;">  </td>
  </tr>
  <tr>
   <td style="text-align:left;font-weight: bold;"> match_round_id </td>
   <td style="text-align:left;"> Round ID from file contents matches round ID from file name. Skipped if `round_id_from_var` is FALSE in config. </td>
   <td style="text-align:left;"> TRUE </td>
   <td style="text-align:left;"> check_error </td>
   <td style="text-align:left;">  </td>
  </tr>
  <tr>
   <td style="text-align:left;font-weight: bold;"> colnames </td>
   <td style="text-align:left;"> File column names match expected column names for round (i.e. task ID names + hub standard column names) </td>
   <td style="text-align:left;"> TRUE </td>
   <td style="text-align:left;"> check_error </td>
   <td style="text-align:left;">  </td>
  </tr>
  <tr>
   <td style="text-align:left;font-weight: bold;"> col_types </td>
   <td style="text-align:left;"> File column types match expected column types from config. Mainly applicable to parquet &amp; arrow files. </td>
   <td style="text-align:left;"> FALSE </td>
   <td style="text-align:left;"> check_failure </td>
   <td style="text-align:left;">  </td>
  </tr>
  <tr>
   <td style="text-align:left;font-weight: bold;"> valid_vals </td>
   <td style="text-align:left;"> Columns (excluding `value` column) contain valid combinations of task ID / output type / output type ID values </td>
   <td style="text-align:left;"> TRUE </td>
   <td style="text-align:left;"> check_error </td>
   <td style="text-align:left;"> error_tbl: table of invalid task ID/output type/output type ID value combinations </td>
  </tr>
  <tr>
   <td style="text-align:left;font-weight: bold;"> rows_unique </td>
   <td style="text-align:left;"> Columns (excluding `value` column) contain unique combinations of task ID / output type / output type ID values </td>
   <td style="text-align:left;"> FALSE </td>
   <td style="text-align:left;"> check_failure </td>
   <td style="text-align:left;">  </td>
  </tr>
  <tr>
   <td style="text-align:left;font-weight: bold;"> req_vals </td>
   <td style="text-align:left;"> Columns (excluding `value` column) contain all required combinations of task ID / output type / output type ID values </td>
   <td style="text-align:left;"> FALSE </td>
   <td style="text-align:left;"> check_failure </td>
   <td style="text-align:left;"> missing_df: table of missing task ID/output type/output type ID value combinations </td>
  </tr>
  <tr>
   <td style="text-align:left;font-weight: bold;"> value_col_valid </td>
   <td style="text-align:left;"> Values in `value` column are coercible to data type configured for each output type </td>
   <td style="text-align:left;"> FALSE </td>
   <td style="text-align:left;"> check_failure </td>
   <td style="text-align:left;">  </td>
  </tr>
  <tr>
   <td style="text-align:left;font-weight: bold;"> value_col_non_desc </td>
   <td style="text-align:left;"> Values in `value` column are non-decreasing as output_type_ids increase for all unique task ID /output type value combinations. Applies to `quantile` or `cdf` output types only </td>
   <td style="text-align:left;"> FALSE </td>
   <td style="text-align:left;"> check_failure </td>
   <td style="text-align:left;"> error_tbl: table of rows affected </td>
  </tr>
  <tr>
   <td style="text-align:left;font-weight: bold;"> value_col_sum1 </td>
   <td style="text-align:left;"> Values in the `value` column of `pmf` output type data for each unique task ID combination sum to 1. </td>
   <td style="text-align:left;"> FALSE </td>
   <td style="text-align:left;"> check_failure </td>
   <td style="text-align:left;"> error_tbl: table of rows affected </td>
  </tr>
  <tr>
   <td style="text-align:left;font-weight: bold;"> spl_n </td>
   <td style="text-align:left;"> Number of samples for a given compound idx falls within accepted compound task range (v3 and above schema only). </td>
   <td style="text-align:left;"> FALSE </td>
   <td style="text-align:left;"> check_failure </td>
   <td style="text-align:left;"> errors: list of failing sample metadata including information on number of samples per failing compound idx,  expected sample ranges and expected task id value combinations per compound idx. </td>
  </tr>
  <tr>
   <td style="text-align:left;font-weight: bold;"> spl_compound_tid </td>
   <td style="text-align:left;"> The unique combination of compound task ID values is consistent across compound idx samples (v3 and above schema only). </td>
   <td style="text-align:left;"> FALSE </td>
   <td style="text-align:left;"> check_failure </td>
   <td style="text-align:left;"> errors: list containing vector of affected sample (output type) iIDs and an example of the valid compound task ID value combindations per compound idx </td>
  </tr>
  <tr>
   <td style="text-align:left;font-weight: bold;"> spl_non_compound_tid </td>
   <td style="text-align:left;"> The unique combinations of non-compound task ID values are consistent across all samples in a given modeling task (v3 and above schema only). </td>
   <td style="text-align:left;"> FALSE </td>
   <td style="text-align:left;"> check_failure </td>
   <td style="text-align:left;"> errors: list containing vector of affected sample (output type) iIDs and an example of the prevalent non-compound task ID value combindations per modeling task </td>
  </tr>
</tbody>
</table>
}}
}
\examples{
hub_path <- system.file("testhubs/simple", package = "hubValidations")
file_path <- "team1-goodmodel/2022-10-08-team1-goodmodel.csv"
validate_model_data(hub_path, file_path)
}
