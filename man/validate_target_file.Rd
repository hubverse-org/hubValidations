% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate_target_file.R
\name{validate_target_file}
\alias{validate_target_file}
\title{Validate file level properties of a target data file.}
\usage{
validate_target_file(
  hub_path,
  file_path,
  validations_cfg_path = NULL,
  round_id = "default"
)
}
\arguments{
\item{hub_path}{Either a character string path to a local Modeling Hub directory
or an object of class \verb{<SubTreeFileSystem>} created using functions \code{\link[hubData:s3_bucket]{s3_bucket()}}
or \code{\link[hubData:gs_bucket]{gs_bucket()}} by providing a string S3 or GCS bucket name or path to a
Modeling Hub directory stored in the cloud.
For more details consult the
\href{https://arrow.apache.org/docs/r/articles/fs.html}{Using cloud storage (S3, GCS)}
in the \code{arrow} package.
The hub must be fully configured with valid \code{admin.json} and \code{tasks.json}
files within the \code{hub-config} directory.}

\item{file_path}{A character string representing the path to the target data
file relative to the \code{target-data} directory.}

\item{validations_cfg_path}{Path to YAML file configuring custom validation checks.
If \code{NULL} defaults to standard \code{hub-config/validations.yml} path. For more details
see \href{https://hubverse-org.github.io/hubValidations/articles/deploying-custom-functions.html}{article on custom validation checks}.}

\item{round_id}{character string. The round identifier.}
}
\value{
An object of class \code{hub_validations}. Each named element contains
a \code{hub_check} class object reflecting the result of a given check. Function
will return early if a check returns an error.

For more details on the structure of \verb{<hub_validations>} objects, including
how to access more information on individual checks,
see \href{https://hubverse-org.github.io/hubValidations/articles/hub-validations-class.html}{article on \verb{<hub_validations>} S3 class objects}.
}
\description{
Validate file level properties of a target data file.
}
\details{
Details of checks performed by \code{validate_target_file()}\if{html}{\out{<table class="table table-striped table-hover table-condensed table-responsive" style="margin-left: auto; margin-right: auto;">}}\if{html}{\out{
 <thead>
  <tr>
   <th style="text-align:left;"> Name </th>
   <th style="text-align:left;"> Check </th>
   <th style="text-align:left;"> Early return </th>
   <th style="text-align:left;"> Fail output </th>
   <th style="text-align:left;"> Extra info </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;font-weight: bold;"> target_file_exists </td>
   <td style="text-align:left;"> File exists at `file_path` provided. </td>
   <td style="text-align:left;"> TRUE </td>
   <td style="text-align:left;"> check_error </td>
   <td style="text-align:left;">  </td>
  </tr>
  <tr>
   <td style="text-align:left;font-weight: bold;"> target_partition_file_name </td>
   <td style="text-align:left;"> Hive-style partition file path segments are valid and can be parsed successfully. Skipped if target dataset not hive-partitioned. </td>
   <td style="text-align:left;"> TRUE </td>
   <td style="text-align:left;"> check_error </td>
   <td style="text-align:left;">  </td>
  </tr>
  <tr>
   <td style="text-align:left;font-weight: bold;"> target_file_ext </td>
   <td style="text-align:left;"> Target data file extension is valid. </td>
   <td style="text-align:left;"> TRUE </td>
   <td style="text-align:left;"> check_error </td>
   <td style="text-align:left;">  </td>
  </tr>
</tbody>
</table>
}}
}
\examples{
hub_path <- system.file("testhubs/v5/target_file", package = "hubValidations")
validate_target_file(hub_path,
  file_path = "time-series.csv"
)
validate_target_file(hub_path,
  file_path = "oracle-output.csv"
)
hub_path <- system.file("testhubs/v5/target_dir",
  package = "hubValidations"
)
validate_target_file(hub_path,
  file_path = "time-series/target=wk\%20flu\%20hosp\%20rate/part-0.parquet"
)
validate_target_file(hub_path,
  file_path = "oracle-output/output_type=pmf/part-0.parquet"
)
}
