% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate_target_data.R
\name{validate_target_data}
\alias{validate_target_data}
\title{Validate the contents of a submitted target data file.}
\usage{
validate_target_data(
  hub_path,
  file_path,
  target_type = c("time-series", "oracle-output"),
  date_col = NULL,
  na = c("NA", ""),
  output_type_id_datatype = c("from_config", "auto", "character", "double", "integer",
    "logical", "Date"),
  validations_cfg_path = NULL,
  round_id = "default"
)
}
\arguments{
\item{hub_path}{Either a character string path to a local Modeling Hub directory
or an object of class \verb{<SubTreeFileSystem>} created using functions \code{\link[hubData:s3_bucket]{s3_bucket()}}
or \code{\link[hubData:gs_bucket]{gs_bucket()}} by providing a string S3 or GCS bucket name or path to a
Modeling Hub directory stored in the cloud.
For more details consult the
\href{https://arrow.apache.org/docs/r/articles/fs.html}{Using cloud storage (S3, GCS)}
in the \code{arrow} package.
The hub must be fully configured with valid \code{admin.json} and \code{tasks.json}
files within the \code{hub-config} directory.}

\item{file_path}{A character string representing the path to the target data
file relative to the \code{target-data} directory.}

\item{target_type}{Type of target data to retrieve matching files. One of "time-series" or
"oracle-output". Defaults to "time-series".}

\item{date_col}{Optional column name to be interpreted as date. Default is \code{NULL}.
Useful when the required date column is a partitioning column in the target data
and does not have the same name as a date typed task ID variable in the config.}

\item{na}{A character vector of strings to interpret as missing values. Only
applies to CSV files. The default is \code{c("NA", "")}. Useful when actual character
string \code{"NA"} values are used in the data. In such a case, use empty cells to
indicate missing values in your files and set \code{na = ""}.}

\item{output_type_id_datatype}{character string. One of \code{"from_config"}, \code{"auto"},
\code{"character"}, \code{"double"}, \code{"integer"}, \code{"logical"}, \code{"Date"}.
Defaults to \code{"from_config"} which uses the setting in the \code{output_type_id_datatype}
property in the \code{tasks.json} config file if available. If the property is
not set in the config, the argument falls back to \code{"auto"} which determines
the  \code{output_type_id} data type automatically from the \code{tasks.json}
config file as the simplest data type required to represent all output
type ID values across all output types in the hub.
When only point estimate output types (where \code{output_type_id}s are \code{NA},) are
being collected by a hub, the \code{output_type_id} column is assigned a \code{character}
data type when auto-determined.
Other data type values can be used to override automatic determination.
Note that attempting to coerce \code{output_type_id} to a data type that is
not valid for the data (e.g. trying to coerce\code{"character"} values to
\code{"double"}) will likely result in an error or potentially unexpected
behaviour so use with care.}

\item{validations_cfg_path}{Path to YAML file configuring custom validation checks.
If \code{NULL} defaults to standard \code{hub-config/validations.yml} path. For more details
see \href{https://hubverse-org.github.io/hubValidations/articles/deploying-custom-functions.html}{article on custom validation checks}.}

\item{round_id}{Character string. Not generally relevant to target datasets
but can be used to specify a specific block of custom validation checks.
Otherwise best set to \code{"default"} which will deploy the default custom
validation checks.}
}
\value{
An object of class \code{hub_validations}. Each named element contains
a \code{hub_check} class object reflecting the result of a given check. Function
will return early if a check returns an error.

For more details on the structure of \verb{<hub_validations>} objects, including
how to access more information on individual checks,
see \href{https://hubverse-org.github.io/hubValidations/articles/hub-validations-class.html}{article on \verb{<hub_validations>} S3 class objects}.
}
\description{
Validate the contents of a submitted target data file.
}
\details{
Details of checks performed by \code{validate_target_data()}\if{html}{\out{<table class="table table-striped table-hover table-condensed table-responsive" style="margin-left: auto; margin-right: auto;">}}\if{html}{\out{
 <thead>
  <tr>
   <th style="text-align:left;"> Name </th>
   <th style="text-align:left;"> Check </th>
   <th style="text-align:left;"> Early return </th>
   <th style="text-align:left;"> Fail output </th>
   <th style="text-align:left;"> Extra info </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;font-weight: bold;"> target_file_read </td>
   <td style="text-align:left;"> Target data file can be read successfully. </td>
   <td style="text-align:left;"> TRUE </td>
   <td style="text-align:left;"> check_error </td>
   <td style="text-align:left;">  </td>
  </tr>
  <tr>
   <td style="text-align:left;font-weight: bold;"> target_tbl_colnames </td>
   <td style="text-align:left;"> Target data file has the correct column names according to target type. </td>
   <td style="text-align:left;"> TRUE </td>
   <td style="text-align:left;"> check_error </td>
   <td style="text-align:left;">  </td>
  </tr>
  <tr>
   <td style="text-align:left;font-weight: bold;"> target_tbl_coltypes </td>
   <td style="text-align:left;"> Target data file has the correct column types according to target type. </td>
   <td style="text-align:left;"> TRUE </td>
   <td style="text-align:left;"> check_error </td>
   <td style="text-align:left;">  </td>
  </tr>
  <tr>
   <td style="text-align:left;font-weight: bold;"> target_tbl_ts_targets </td>
   <td style="text-align:left;"> Targets in a time-series target data file are valid. Only performed on `time-series` data files. </td>
   <td style="text-align:left;"> TRUE </td>
   <td style="text-align:left;"> check_error </td>
   <td style="text-align:left;">  </td>
  </tr>
  <tr>
   <td style="text-align:left;font-weight: bold;"> target_tbl_rows_unique </td>
   <td style="text-align:left;"> Target data file rows are all unique. </td>
   <td style="text-align:left;"> FALSE </td>
   <td style="text-align:left;"> check_failure </td>
   <td style="text-align:left;">  </td>
  </tr>
  <tr>
   <td style="text-align:left;font-weight: bold;"> target_tbl_values </td>
   <td style="text-align:left;"> Task ID columns in a target data file have valid task ID values. </td>
   <td style="text-align:left;"> TRUE </td>
   <td style="text-align:left;"> check_error </td>
   <td style="text-align:left;">  </td>
  </tr>
  <tr>
   <td style="text-align:left;font-weight: bold;"> target_tbl_output_type_ids </td>
   <td style="text-align:left;"> Output type ID values in a target data file are valid and complete. Only performed when the target data file contains an `output_type_id` column. </td>
   <td style="text-align:left;"> TRUE </td>
   <td style="text-align:left;"> check_error </td>
   <td style="text-align:left;">  </td>
  </tr>
  <tr>
   <td style="text-align:left;font-weight: bold;"> target_tbl_oracle_value </td>
   <td style="text-align:left;"> Oracle values in a target data file are valid. Only performed on `oracle output` data files. </td>
   <td style="text-align:left;"> FALSE </td>
   <td style="text-align:left;"> check_failure </td>
   <td style="text-align:left;">  </td>
  </tr>
</tbody>
</table>
}}
}
\examples{
hub_path <- system.file("testhubs/v5/target_file", package = "hubUtils")
validate_target_data(hub_path,
  file_path = "time-series.csv",
  target_type = "time-series"
)
validate_target_data(hub_path,
  file_path = "oracle-output.csv",
  target_type = "oracle-output"
)
hub_path <- system.file("testhubs/v5/target_dir", package = "hubUtils")
validate_target_data(hub_path,
  file_path = "time-series/target=wk\%20flu\%20hosp\%20rate/part-0.parquet",
  target_type = "time-series"
)
validate_target_data(hub_path,
  file_path = "oracle-output/output_type=pmf/part-0.parquet",
  target_type = "oracle-output"
)
}
