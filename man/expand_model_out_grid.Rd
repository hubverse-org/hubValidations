% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expand_model_out_grid.R
\name{expand_model_out_grid}
\alias{expand_model_out_grid}
\title{Create expanded grid of valid task ID and output type value combinations}
\usage{
expand_model_out_grid(
  config_tasks,
  round_id,
  required_vals_only = FALSE,
  all_character = FALSE,
  output_type_id_datatype = c("from_config", "auto", "character", "double", "integer",
    "logical", "Date"),
  as_arrow_table = FALSE,
  bind_model_tasks = TRUE,
  include_sample_ids = FALSE
)
}
\arguments{
\item{config_tasks}{a list version of the content's of a hub's \code{tasks.json}
config file, accessed through the \code{"config_tasks"} attribute of a \verb{<hub_connection>}
object or function \code{\link[hubUtils:read_config]{hubUtils::read_config()}}.}

\item{round_id}{Character string. Round identifier. If the round is set to
\code{round_id_from_variable: true}, IDs are values of the task ID defined in the round's
\code{round_id} property of \code{config_tasks}.
Otherwise should match round's \code{round_id} value in config. Ignored if hub
contains only a single round.}

\item{required_vals_only}{Logical. Whether to return only combinations of
Task ID and related output type ID required values.}

\item{all_character}{Logical. Whether to return all character column.}

\item{output_type_id_datatype}{character string. One of \code{"from_config"}, \code{"auto"},
\code{"character"}, \code{"double"}, \code{"integer"}, \code{"logical"}, \code{"Date"}.
Defaults to \code{"from_config"} which uses the setting in the \code{output_type_id_datatype}
property in the \code{tasks.json} config file if available. If the property is
not set in the config, the argument falls back to \code{"auto"} which determines
the  \code{output_type_id} data type automatically from the \code{tasks.json}
config file as the simplest data type required to represent all output
type ID values across all output types in the hub.
Other data type values can be used to override automatic determination.
Note that attempting to coerce \code{output_type_id} to a data type that is
not valid for the data (e.g. trying to coerce\code{"character"} values to
\code{"double"}) will likely result in an error or potentially unexpected
behaviour so use with care.}

\item{as_arrow_table}{Logical. Whether to return an arrow table. Defaults to \code{FALSE}.}

\item{bind_model_tasks}{Logical. Whether to bind expanded grids of
values from multiple modeling tasks into a single tibble/arrow table or
return a list.}

\item{include_sample_ids}{Logical. Whether to include sample identifiers in
the \code{output_type_id} column.}
}
\value{
If \code{bind_model_tasks = TRUE} (default) a tibble or arrow table
containing all possible task ID and related output type ID
value combinations. If \code{bind_model_tasks = FALSE}, a list containing a
tibble or arrow table for each round modeling task.

Columns are coerced to data types according to the hub schema,
unless \code{all_character = TRUE}. If \code{all_character = TRUE}, all columns are returned as
character which can be faster when large expanded grids are expected.
If \code{required_vals_only = TRUE}, values are limited to the combinations of required
values only.
}
\description{
Create expanded grid of valid task ID and output type value combinations
}
\details{
When a round is set to \code{round_id_from_variable: true},
the value of the task ID from which round IDs are derived (i.e. the task ID
specified in \code{round_id} property of \code{config_tasks}) is set to the value of the
\code{round_id} argument in the returned output.

When sample output types are included in the output and \code{include_sample_ids = TRUE},
the \code{output_type_id} column contains example sample indexes which are useful
for identifying the compound task ID structure of multivariate sampling
distributions in particular, i.e. which combinations of task ID values
represent individual samples.
}
\examples{
hub_con <- hubData::connect_hub(
  system.file("testhubs/flusight", package = "hubUtils")
)
config_tasks <- attr(hub_con, "config_tasks")
expand_model_out_grid(config_tasks, round_id = "2023-01-02")
expand_model_out_grid(
  config_tasks,
  round_id = "2023-01-02",
  required_vals_only = TRUE
)
# Specifying a round in a hub with multiple round configurations.
hub_con <- hubData::connect_hub(
  system.file("testhubs/simple", package = "hubUtils")
)
config_tasks <- attr(hub_con, "config_tasks")
expand_model_out_grid(config_tasks, round_id = "2022-10-01")
# Later round_id maps to round config that includes additional task ID 'age_group'.
expand_model_out_grid(config_tasks, round_id = "2022-10-29")
# Coerce all columns to character
expand_model_out_grid(config_tasks,
  round_id = "2022-10-29",
  all_character = TRUE
)
# Return arrow table
expand_model_out_grid(config_tasks,
  round_id = "2022-10-29",
  all_character = TRUE,
  as_arrow_table = TRUE
)
# Hub with sample output type
config_tasks <- hubUtils::read_config_file(system.file("config", "tasks.json",
  package = "hubValidations"
))
expand_model_out_grid(config_tasks,
  round_id = "2022-12-26"
)
# Include sample IDS
expand_model_out_grid(config_tasks,
  round_id = "2022-12-26",
  include_sample_ids = TRUE
)
# Hub with sample output type and compound task ID structure
config_tasks <- hubUtils::read_config_file(system.file("config", "tasks-comp-tid.json",
  package = "hubValidations"
))
expand_model_out_grid(config_tasks,
  round_id = "2022-12-26",
  include_sample_ids = TRUE
)
}
