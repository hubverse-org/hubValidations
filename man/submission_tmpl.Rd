% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/submission_tmpl.R
\name{submission_tmpl}
\alias{submission_tmpl}
\title{Create a model output submission file template}
\usage{
submission_tmpl(
  hub_path,
  round_id,
  required_vals_only = FALSE,
  force_output_types = FALSE,
  complete_cases_only = TRUE,
  compound_taskid_set = NULL,
  output_types = NULL,
  derived_task_ids = NULL,
  hub_con = deprecated(),
  config_tasks = deprecated()
)
}
\arguments{
\item{hub_path}{Either a character string path to a local Modeling Hub directory
or an object of class \verb{<SubTreeFileSystem>} created using functions \code{\link[hubData:s3_bucket]{s3_bucket()}}
or \code{\link[hubData:gs_bucket]{gs_bucket()}} by providing a string S3 or GCS bucket name or path to a
Modeling Hub directory stored in the cloud.
For more details consult the
\href{https://arrow.apache.org/docs/r/articles/fs.html}{Using cloud storage (S3, GCS)}
in the \code{arrow} package.
The hub must be fully configured with valid \code{admin.json} and \code{tasks.json}
files within the \code{hub-config} directory.}

\item{round_id}{Character string. Round identifier. If the round is set to
\code{round_id_from_variable: true}, IDs are values of the task ID defined in the round's
\code{round_id} property of \code{config_tasks}.
Otherwise should match round's \code{round_id} value in config. Ignored if hub
contains only a single round.}

\item{required_vals_only}{Logical. Whether to return only combinations of
Task ID and related output type ID required values.}

\item{force_output_types}{Logical. Whether to force all output types to be required.
If \code{TRUE}, all output type ID values are treated as required regardless
of the value of the \code{is_required} property. Useful for creating grids of required
values for optional output types.}

\item{complete_cases_only}{Logical. If \code{TRUE} (default) and \code{required_vals_only = TRUE},
only rows with complete cases of combinations of required values are returned.
If \code{FALSE}, rows with incomplete cases of combinations of required values
are included in the output.}

\item{compound_taskid_set}{List of character vectors, one for each modeling task
in the round. Can be used to override the compound task ID set defined in the
config. If \code{NULL} is provided for a given modeling task, a compound task ID set of
all task IDs is used.}

\item{output_types}{Character vector of output type names to include.
Use to subset for grids for specific output types.}

\item{derived_task_ids}{Character vector of derived task ID names (task IDs whose
values depend on other task IDs) to ignore. Columns for such task ids will
contain \code{NA}s.
If \code{NULL}, defaults to extracting derived task IDs from \code{config_tasks} or
the \code{config_tasks} attribute of \code{hub_con}. See \code{\link[=get_config_derived_task_ids]{get_config_derived_task_ids()}}
for more details.}

\item{hub_con}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} Use \code{hub_path} instead. A
\verb{⁠<hub_connection>⁠} class object.}

\item{config_tasks}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} Use \code{hub_path} instead.
A list version of the content's of a hub's \code{tasks.json} config file,
accessed through the \code{"config_tasks"} attribute of a \verb{<hub_connection>}
object or function \code{\link[=read_config]{read_config()}}.}
}
\value{
a tibble template containing an expanded grid of valid task ID and
output type ID value combinations for a given submission round
and output type.
If \code{required_vals_only = TRUE}, values are limited to the combination of required
values only.
}
\description{
Create a model output submission file template
}
\details{
For task IDs where all values are optional, by default, columns
are created as columns of \code{NA}s when \code{required_vals_only = TRUE}.
When such columns exist, the function returns a tibble with zero rows, as no
complete cases of required value combinations exists.
\emph{(Note that determination of complete cases does excludes valid \code{NA}
\code{output_type_id} values in \code{"mean"} and \code{"median"} output types).}
To return a template of incomplete required cases, which includes \code{NA} columns, use
\code{complete_cases_only = FALSE}.

To include output types that are optional in the submission template
when \code{required_vals_only = TRUE} and \code{complete_cases_only = FALSE}, use
\code{force_output_types = TRUE}. Use this in combination with sub-setting for
output types you plan to submit via argument \code{output_types} to create a
submission template customised to your submission plans.
\emph{Tip: to ensure you create a template with all required output types, it's
a good idea to first run the functions without subsetting or forcing output
types and examing the unique values in \code{output_type} to check which output
types are required.}

When sample output types are included in the output, the \code{output_type_id}
column contains example sample indexes which are useful for identifying the
compound task ID structure of multivariate sampling distributions in particular,
i.e. which combinations of task ID values represent individual samples.

When a round is set to \code{round_id_from_variable: true},
the value of the task ID from which round IDs are derived (i.e. the task ID
specified in \code{round_id} property of \code{config_tasks}) is set to the value of the
\code{round_id} argument in the returned output.
}
\examples{
hub_path <- system.file("testhubs/flusight", package = "hubUtils")
submission_tmpl(hub_path, round_id = "2023-01-02")
submission_tmpl(
  hub_path,
  round_id = "2023-01-02",
  required_vals_only = TRUE
)
submission_tmpl(
  hub_path,
  round_id = "2023-01-02",
  required_vals_only = TRUE,
  complete_cases_only = FALSE
)
# Specifying a round in a hub with multiple rounds
hub_path <- system.file("testhubs/simple", package = "hubUtils")
submission_tmpl(hub_path, round_id = "2022-10-01")
submission_tmpl(hub_path, round_id = "2022-10-29")
submission_tmpl(hub_path,
  round_id = "2022-10-29",
  required_vals_only = TRUE
)
submission_tmpl(hub_path,
  round_id = "2022-10-29",
  required_vals_only = TRUE,
  complete_cases_only = FALSE
)
# Hub with sample output type
hub_path <- system.file("testhubs", "samples", package = "hubValidations")
submission_tmpl(hub_path, round_id = "2022-12-17")
# Subset for a single output type
submission_tmpl(
  hub_path,
  round_id = "2022-12-17",
  output_types = "sample"
)
# Override config compound task ID set
# Create coarser compound task ID set for the first modeling task which contains
# samples
submission_tmpl(
  hub_path,
  round_id = "2022-12-17",
  output_types = "sample",
  compound_taskid_set = list(
    NULL,
    "reference_date"
  )
)
# Derive a template with ignored derived task ID. Useful to avoid creating
# a template with invalid derived task ID value combinations.
hub_path <- system.file("testhubs", "flusight", package = "hubValidations")
submission_tmpl(
  hub_path,
  round_id = "2022-12-12",
  output_types = "pmf",
  derived_task_ids = "target_end_date",
  complete_cases_only = FALSE
)
# Force optional output type, in this case "mean".
submission_tmpl(
  hub_path,
  round_id = "2022-12-12",
  required_vals_only = TRUE,
  output_types = c("pmf", "quantile", "mean"),
  force_output_types = TRUE,
  derived_task_ids = "target_end_date",
  complete_cases_only = FALSE
)
}
