[{"path":[]},{"path":"https://hubverse-org.github.io/hubValidations/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying standards acceptable behavior. Enforcement responsibility Code Conduct Committee, take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Instances abusive, harassing, otherwise unacceptable behavior may reported member Code Conduct Committee. complaints reviewed investigated promptly fairly. Code Conduct Committee use Enforcement Manual determining consequences action deem violation Code Conduct. community leaders Code Conduct Committee members obligated respect privacy security reporter incident.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to hubValidations","title":"Contributing to hubValidations","text":"outlines propose change hubValidations. general info contributing , hubverse packages, please see hubverse contributing guide. can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to hubValidations","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). procedures contributed bigger changes, code particular, generally follow advised tidyverse dev team, including following tidyverse style guide code recording user facing changes NEWS.md.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/CONTRIBUTING.html","id":"submitting-new-check-functions","dir":"","previous_headings":"","what":"Submitting new check functions","title":"Contributing to hubValidations","text":"submitting new check function, please ensure update inst/check_table.csv metadata check. file records metadata check functions, standard optional used primarily documentation. Information required includes: Name check (appear hub_validations object output calling function). field NA optional functions name user defined. Description check. Whether cause calling function return early. Whether returns <check_error> <check_warning> class object check fails. calling function designed called . additional information contained function output. Whether check optional.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Submitting new check functions","what":"Pull request process","title":"Contributing to hubValidations","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"hubverse-org/hubValidations\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Follow pull request checklist create Git branch pull request (PR). recommend using usethis::pr_init(\"name/brief-description/issue\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first heading—usually labelled “development version”). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Submitting new check functions","what":"Code style","title":"Contributing to hubValidations","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to hubValidations","text":"Please note hubValidations project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Consortium Infectious Disease Modeling Hubs Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/deploying-custom-functions.html","id":"validations-yml-structure","dir":"Articles","previous_headings":"","what":"validations.yml structure","title":"Deploying custom validation functions","text":"validations.yml files follow nested structure described :","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/deploying-custom-functions.html","id":"default-configuration","dir":"Articles","previous_headings":"validations.yml structure","what":"Default configuration","title":"Deploying custom validation functions","text":"top validations.yml file, required default: top level property, contain default custom validation configurations executed regardless round ID. Within default configuration, individual checks can configured 3 validation functions run part validate_submission(), using following structure validation function: fn: name check function run, character string (required). pkg: name package namespace get check function. Must supplied function distributed part package. source: Path .R script containing function code sourced. relative, relative hub’s directory root. Must supplied function part package exists script. args: yaml dictionary key/value pairs arguments values passed custom function. Values can yaml lists even executable R code (optional). validate_*() functions contain number standard objects call environment available downstream check functions use arguments passed automatically arguments optional/custom functions name. Therefore, values arguments need including function deployment configuration can overridden function’s args configuration validations.yml deployment. validate_*() functions contain following five objects caller environment: file_path: character string path file validated relative model-output directory. hub_path: character string path hub. round_id: character string round_id derived model file name. file_meta: named list containing round_id, team_abbr, model_abbr model_id details. validations_cfg_path: character string path validations.yml file. Defaults hub-config/validations.yml. validate_model_data() contain following additional objects: tbl: tibble model output data validated. tbl_chr: tibble model output data validated columns coerced character type. round_id_col: character string name tbl column containing round_id information. Defaults NULL usually determined tasks.json config applicable unless explicitly provided argument validate_model_data(). output_type_id_datatype: character string. value output_type_id_datatype argument. value useful functions like hubData::create_hub_schema() hubValidations::expand_model_out_grid() set data type output_type_id column. derived_task_ids: character vector NULL. value derived_task_ids argument, .e. names task IDs whose values depend task IDs. args configuration can used override objects caller environment well defaults deployment.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/deploying-custom-functions.html","id":"deploying-optional-hubvalidations-functions","dir":"Articles","previous_headings":"validations.yml structure > Default configuration","what":"Deploying optional hubValidations functions","title":"Deploying custom validation functions","text":"’s example configuration single optional hubValidations check, opt_check_tbl_horizon_timediff(), checks temporal difference values two date columns (defined additional arguments t0_colname & t1_colname) equal time period defined horizon values (contained column defined horizon_colname) length single horizon defined argument timediff. check run part validate_model_data() validation function checks content model data submission files. configuration file relies default values arguments horizon_colname (\"horizon\") timediff (lubridate::weeks()). can use validations.yml args list override horizon_colname timediff argument default values. example, also include executable r code value timediff argument.","code":"default:     validate_model_data:       horizon_timediff:         fn: \"opt_check_tbl_horizon_timediff\"         pkg: \"hubValidations\"         args:           t0_colname: \"forecast_date\"           t1_colname: \"target_end_date\" default:     validate_model_data:       horizon_timediff:         fn: \"opt_check_tbl_horizon_timediff\"         pkg: \"hubValidations\"         args:           t0_colname: \"forecast_date\"           t1_colname: \"target_end_date\"           horizon_colname: \"horizons\"           timediff: !expr lubridate::weeks(2)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/deploying-custom-functions.html","id":"deploying-custom-functions","dir":"Articles","previous_headings":"validations.yml structure > Default configuration","what":"Deploying custom functions","title":"Deploying custom validation functions","text":"example involved optional hubValidation function. deploy custom function part hubValidations package, store script containing function src/validations/R/ directory (relative root hub) include path script source argument configuration file.","code":"default:     validate_model_data:       custom_check:         fn: \"cstm_check_tbl_example\"         source: \"src/validations/R/cstm_check_tbl_example.R\""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/deploying-custom-functions.html","id":"round-specific-configuration","dir":"Articles","previous_headings":"validations.yml structure","what":"Round specific configuration","title":"Deploying custom validation functions","text":"Additional round specific configurations can included validations.yml can add override default configurations. example, following validations.yml deploys opt_check_tbl_col_timediff() optional check, file validated submitted round round ID \"2023-08-15\", default col_timediff check configuration overridden 2023-08-15 configuration.","code":"default:     validate_model_data:       col_timediff:         fn: \"opt_check_tbl_col_timediff\"         pkg: \"hubValidations\"         args:           t0_colname: \"forecast_date\"           t1_colname: \"target_end_date\"  2023-08-15:     validate_model_data:       col_timediff:         fn: \"opt_check_tbl_col_timediff\"         pkg: \"hubValidations\"         args:           t0_colname: \"forecast_date\"           t1_colname: \"target_end_date\"           timediff: !expr lubridate::weeks(1)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/deploying-custom-functions.html","id":"available-optional-functions","dir":"Articles","previous_headings":"","what":"Available optional functions","title":"Deploying custom validation functions","text":"hubValidations includes number optional checks checks require administrator configuration run, detailed . detail function configuration parameters, consult function documentation.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/deploying-custom-functions.html","id":"for-deploying-through-validate_model_data","dir":"Articles","previous_headings":"Available optional functions","what":"For deploying through validate_model_data","title":"Deploying custom validation functions","text":"Details available optional checks checks requiring configuration validate_model_data().","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/deploying-custom-functions.html","id":"for-deploying-through-validate_model_metadata","dir":"Articles","previous_headings":"Available optional functions","what":"For deploying through validate_model_metadata","title":"Deploying custom validation functions","text":"Details available optional checks checks requiring configuration validate_model_metadata().","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/deploying-custom-functions.html","id":"managing-dependencies-of-custom-functions","dir":"Articles","previous_headings":"","what":"Managing dependencies of custom functions","title":"Deploying custom validation functions","text":"custom functions deploying depend additional packages, need ensure packages available validation.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/deploying-custom-functions.html","id":"available-dependencies","dir":"Articles","previous_headings":"Managing dependencies of custom functions","what":"Available dependencies","title":"Deploying custom validation functions","text":"hubValidations exported functions available use custom check functions well functions hubverse packages huUtils, hubAdmin hubData. addition, functions packages hubValidations dependency tree also generally available, locally (hubValidations installed) hubverse validate-submission GitHub Action. Functions packages can used custom checks without specifying additional dependencies.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/deploying-custom-functions.html","id":"additional-dependencies","dir":"Articles","previous_headings":"Managing dependencies of custom functions","what":"Additional dependencies","title":"Deploying custom validation functions","text":"custom functions deploying depend additional packages, need ensure packages available validation. simplest way ensure available edit setup-r-dependencies step hubverse-actions validate-submission.yaml GitHub Action workflow hub add additional dependency packages field list. following pseudo example add additionalPackage package list standard dependencies: Note ensures additional dependency available validation GitHub guarantee installed locally hub administrators submitting teams. Indeed missing dependencies lead execution errors custom checks running validate_submission() locally. use documentation, like hub’s README communicate additional required dependencies validation submitting teams. Even better, add check top function catch missing dependencies provide helpful error message user.","code":"- uses: r-lib/actions/setup-r-dependencies@v2         with:           packages: |             any::hubValidations             any::sessioninfo             any::additionalPackage"},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/deploying-custom-functions.html","id":"deploying-custom-functions-as-a-package","dir":"Articles","previous_headings":"Managing dependencies of custom functions > Additional dependencies","what":"Deploying custom functions as a package","title":"Deploying custom validation functions","text":"deploy custom functions managed package src/validations, can use pkg configuration property validations.yml file specify package namespace. example, created simple package src/validations/ cstm_check_tbl_example.R script containing specification cstm_check_tbl_example() function src/validations/R, can use following configuration validation.yml file source function installed validations package namespace: ensure package (additional dependencies depends ) installed available validation, must add package setup-r-dependencies step hubverse-actions validate-submission.yaml GitHub Action workflow hub like :","code":"default:     validate_model_data:       custom_check:         fn: \"cstm_check_tbl_example\"         pkg: \"validations\" - uses: r-lib/actions/setup-r-dependencies@v2         with:           packages: |             any::hubValidations             any::sessioninfo             local::./src/validations"},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/hub-validations-class.html","id":"structure-of-hub_validations-object","dir":"Articles","previous_headings":"","what":"Structure of <hub_validations> object","title":"Structure of hub_validations class objects","text":"hub_validations object effectively list represents collected output series checks performed higher level validate_*() function. named element list contains result individual check inherits subclass <hub_check>. name element name check. Let’s examine example output model output file validation using validate_submission(). super class returned element depends status check: check succeeds, <message/check_success> condition class object returned. check skipped, <message/check_info> condition class object returned. Checks vary respect whether return <error/check_failure> <error/check_error> condition class object check fails. <error/check_failure> class objects indicate check failed affect downstream checks validation able proceed. <error/check_error>  class objects indicate early termination validation process failure check downstream checks depend . Ultimately, cause overall validation fail. <error/check_error> class exists alert fact may errors yet reported due early termination check process.","code":"hub_path <- system.file(\"testhubs/simple\", package = \"hubValidations\")  v <- validate_submission(hub_path,   file_path = \"team1-goodmodel/2022-10-08-team1-goodmodel.csv\" )  str(v, max.level = 1) #> Classes 'hub_validations', 'list'  hidden list of 21 #>  $ valid_config      :List of 4 #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ file_exists       :List of 4 #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ file_name         :List of 4 #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ file_location     :List of 4 #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ round_id_valid    :List of 4 #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ file_format       :List of 4 #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ file_n            :List of 4 #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ metadata_exists   :List of 4 #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ file_read         :List of 4 #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ valid_round_id_col:List of 4 #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ unique_round_id   :List of 4 #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ match_round_id    :List of 4 #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ colnames          :List of 4 #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ col_types         :List of 4 #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ valid_vals        :List of 5 #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ rows_unique       :List of 4 #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ req_vals          :List of 5 #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ value_col_valid   :List of 4 #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ value_col_non_desc:List of 5 #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ value_col_sum1    :List of 4 #>   ..- attr(*, \"class\")= chr [1:5] \"check_info\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ submission_time   :List of 6 #>   ..- attr(*, \"class\")= chr [1:5] \"check_failure\" \"hub_check\" \"rlang_error\" \"error\" ..."},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/hub-validations-class.html","id":"hub_validations-print-method","dir":"Articles","previous_headings":"","what":"hub_validations print method","title":"Structure of hub_validations class objects","text":"hub_validations objects print method displays result, check name message check: ✔ indicates check successful (<message/check_success> condition class object returned) ✖ indicates check failed , affect downstream checks, validation able proceed (<error/check_failure> condition class object returned) ⓧ indicates check downstream checks depend failed, causing early return validation process (<error/check_error> condition class object returned) ☒ indicates execution error occured check able complete (<error/check_exec_error> condition class object returned). cause early return expected check failure output <error/check_error>. ℹ indicates check skipped (<message/check_info> condition class object returned) Note submission window check always performed reported last.","code":"v #>  #> ── simple ──── #>  #> ✔ [valid_config]: All hub config files are valid. #>  #>  #> ── 2022-10-08-team1-goodmodel.csv ──── #>  #>  #>  #> ✔ [file_exists]: File exists at path #>   model-output/team1-goodmodel/2022-10-08-team1-goodmodel.csv. #> ✔ [file_name]: File name \"2022-10-08-team1-goodmodel.csv\" is valid. #> ✔ [file_location]: File directory name matches `model_id` metadata in file #>   name. #> ✔ [round_id_valid]: `round_id` is valid. #> ✔ [file_format]: File is accepted hub format. #> ✔ [file_n]: Number of accepted model output files per round met. #> ✔ [metadata_exists]: Metadata file exists at path #>   model-metadata/team1-goodmodel.yaml. #> ✔ [file_read]: File could be read successfully. #> ✔ [valid_round_id_col]: `round_id_col` name is valid. #> ✔ [unique_round_id]: `round_id` column \"origin_date\" contains a single, unique #>   round ID value. #> ✔ [match_round_id]: All `round_id_col` \"origin_date\" values match submission #>   `round_id` from file name. #> ✔ [colnames]: Column names are consistent with expected round task IDs and std #>   column names. #> ✔ [col_types]: Column data types match hub schema. #> ✔ [valid_vals]: `tbl` contains valid values/value combinations. #> ✔ [rows_unique]: All combinations of task ID #>   column/`output_type`/`output_type_id` values are unique. #> ✔ [req_vals]: Required task ID/output type/output type ID combinations all #>   present. #> ✔ [value_col_valid]: Values in column `value` all valid with respect to #>   modeling task config. #> ✔ [value_col_non_desc]: Values in `value` column are non-decreasing as #>   output_type_ids increase for all unique task ID value/output type #>   combinations of quantile or cdf output types. #> ℹ [value_col_sum1]: No pmf output types to check for sum of 1. Check skipped. #> ✖ [submission_time]: Submission time must be within accepted submission window #>   for round.  Current time \"2024-11-06 19:35:03 UTC\" is outside window #>   2022-10-02 EDT--2022-10-09 23:59:59 EDT."},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/hub-validations-class.html","id":"structure-of-a-hub_check-object","dir":"Articles","previous_headings":"","what":"Structure of a <hub_check> object","title":"Structure of hub_validations class objects","text":"Let’s look closely structure first elements hub_validations object retuned validate_submission() <hub_check> objects contains following elements: message: result message containing details check. :: check performed, usually model output file name. call: function used perform check. use_cli_format: whether message formatted using cli format, almost always TRUE.","code":"v <- validate_submission(hub_path,   file_path = \"team1-goodmodel/2022-10-08-team1-goodmodel.csv\" )  str(utils::head(v)) #> List of 6 #>  $ valid_config  :List of 4 #>   ..$ message       : chr \"All hub config files are valid. \\n \" #>   ..$ where         : chr \"simple\" #>   ..$ call          : chr \"check_config_hub_valid\" #>   ..$ use_cli_format: logi TRUE #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ file_exists   :List of 4 #>   ..$ message       : chr \"File exists at path \\033[34mmodel-output/team1-goodmodel/2022-10-08-team1-goodmodel.csv\\033[39m. \\n \" #>   ..$ where         : chr \"team1-goodmodel/2022-10-08-team1-goodmodel.csv\" #>   ..$ call          : chr \"check_file_exists\" #>   ..$ use_cli_format: logi TRUE #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ file_name     :List of 4 #>   ..$ message       : chr \"File name \\033[34m\\\"2022-10-08-team1-goodmodel.csv\\\"\\033[39m is valid. \\n \" #>   ..$ where         : chr \"team1-goodmodel/2022-10-08-team1-goodmodel.csv\" #>   ..$ call          : chr \"check_file_name\" #>   ..$ use_cli_format: logi TRUE #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ file_location :List of 4 #>   ..$ message       : chr \"File directory name matches `model_id`\\n                                           metadata in file name. \\n \" #>   ..$ where         : chr \"team1-goodmodel/2022-10-08-team1-goodmodel.csv\" #>   ..$ call          : chr \"check_file_location\" #>   ..$ use_cli_format: logi TRUE #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ round_id_valid:List of 4 #>   ..$ message       : chr \"`round_id` is valid. \\n \" #>   ..$ where         : chr \"team1-goodmodel/2022-10-08-team1-goodmodel.csv\" #>   ..$ call          : chr \"check_valid_round_id\" #>   ..$ use_cli_format: logi TRUE #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ... #>  $ file_format   :List of 4 #>   ..$ message       : chr \"File is accepted hub format. \\n \" #>   ..$ where         : chr \"team1-goodmodel/2022-10-08-team1-goodmodel.csv\" #>   ..$ call          : chr \"check_file_format\" #>   ..$ use_cli_format: logi TRUE #>   ..- attr(*, \"class\")= chr [1:5] \"check_success\" \"hub_check\" \"rlang_message\" \"message\" ..."},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/hub-validations-class.html","id":"extra-information","dir":"Articles","previous_headings":"","what":"Extra information","title":"Structure of hub_validations class objects","text":"<hub_check> objects contain extra information failing check help identify affected rows submissions. example, <hub_check> object returned valid_vals check, checks columns model output file (excluding value column) contain valid combinations task ID / output type / output type ID values contains additional element called error_tbl, details invalid value combinations rows affected. access error_tbl output validate_submission() stored object v, use:","code":"v$valid_vals$error_tbl"},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-pr.html","id":"running-validation-checks-on-a-pull-request-with-validate_pr","dir":"Articles","previous_headings":"","what":"Running validation checks on a Pull Request with validate_pr()","title":"Validating Pull Requests on GitHub","text":"validate_pr() functions designed used validate team submissions Pull Requests GitHub. model output model metadata files individually validated using validate_submission() validate_model_metadata() respectively file according file type (See end article details standard checks performed file. information deploying optional custom functions please check article including custom functions (vignette(\"articles/deploying-custom-functions\"))). part checks, however, hub config files also validated. files included PR ignored flagged message.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-pr.html","id":"deploying-validate_pr-though-a-github-action-workflow","dir":"Articles","previous_headings":"Running validation checks on a Pull Request with validate_pr()","what":"Deploying validate_pr() though a GitHub Action workflow","title":"Validating Pull Requests on GitHub","text":"common way deploy validate_pr() GitHub Action triggers pull request containing changes model output model metadata files opened. hubverse maintains validate-submission.yaml GitHub Action workflow template deploying validate_pr(). latest release workflow can added hub’s GitHub Action workflows using hubCI package: pertinent section workflow : validate_pr() called contents current Pull Request, results (S3 <hub_validations> class object) stored v check_for_errors() used signal whether overall validations passed failed summarise validation failures. ’s example workflow looks like GitHub:","code":"hubCI::use_hub_github_action(\"validate-submission\") - name: Run validations         env:           PR_NUMBER: ${{ github.event.number }}         run: |           library(\"hubValidations\")           v <- hubValidations::validate_pr(               gh_repo = Sys.getenv(\"GITHUB_REPOSITORY\"),               pr_number = Sys.getenv(\"PR_NUMBER\"),               skip_submit_window_check = FALSE           )           hubValidations::check_for_errors(v, verbose = TRUE)         shell: Rscript {0}"},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-pr.html","id":"ignoring-derived-task-ids-to-improve-performance","dir":"Articles","previous_headings":"Running validation checks on a Pull Request with validate_pr()","what":"Ignoring derived task IDs to improve performance","title":"Validating Pull Requests on GitHub","text":"Argument derived_task_ids allows specification task IDs derived task IDs ignored, can often lead significant improvement validation performance.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-pr.html","id":"what-are-derived-task-ids","dir":"Articles","previous_headings":"Running validation checks on a Pull Request with validate_pr() > Ignoring derived task IDs to improve performance","what":"What are derived task IDs?","title":"Validating Pull Requests on GitHub","text":"Derived task IDs class task ID whose values depend values task IDs. , validity derived task ID values dependent values task IDs derived validity value combinations derived task IDs much restricted. common example derived task ID target_end_date often derived reference_date origin_date horizon task ids.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-pr.html","id":"implications-of-derived-task-ids-on-validation-performance","dir":"Articles","previous_headings":"Running validation checks on a Pull Request with validate_pr() > Ignoring derived task IDs to improve performance","what":"Implications of derived task IDs on validation performance","title":"Validating Pull Requests on GitHub","text":"standard validation, derived task IDs like target_end_date tend pollute expanded grid used validate valid value combination invalid combinations. ’s , given combination reference_date horizon values single valid target_end_date value, target_end_date property config contain possible valid values combinations reference_date horizon. values config used create expanded valid values grid, sizes grids can reach function config complexity can often put excessive strain system’s memory, affecting overall performance PR validation.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-pr.html","id":"how-to-ignore-derived-task-ids","dir":"Articles","previous_headings":"Running validation checks on a Pull Request with validate_pr() > Ignoring derived task IDs to improve performance","what":"How to ignore derived task IDs","title":"Validating Pull Requests on GitHub","text":"Supplying names derived task IDs argument derived_task_ids ignore validation checks , depending config complexity, can lead significant improvement validation performance.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-pr.html","id":"warning","dir":"Articles","previous_headings":"Running validation checks on a Pull Request with validate_pr() > Ignoring derived task IDs to improve performance","what":"Warning","title":"Validating Pull Requests on GitHub","text":"Ignoring derived task IDs means validity derived task ID value combinations check. therefore important ensure values derived task IDs correctly derived task IDs custom checks. example, values target_end_date can checked deploying optional check opt_check_tbl_horizon_timediff(). See article including custom functions information.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-pr.html","id":"skipping-submission-window-checks","dir":"Articles","previous_headings":"Running validation checks on a Pull Request with validate_pr()","what":"Skipping submission window checks","title":"Validating Pull Requests on GitHub","text":"hubs require model output files given round submitted within submission window defined \"submission_due\" property tasks.json hub config file. validate_pr() includes submission window checks model output files returns <error/check_failure> condition class object file submitted outside accepted submission window. disable submission window checks, argument skip_submit_window_check can set TRUE.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-pr.html","id":"configuring-file-modificationdeletionrenaming-checks","dir":"Articles","previous_headings":"Running validation checks on a Pull Request with validate_pr()","what":"Configuring file modification/deletion/renaming checks","title":"Validating Pull Requests on GitHub","text":"hubs, modification, renaming deletion previously submitted model output files deletion/renaming previously submitted model metadata files desirable without justification. therefore trigger validation failure notify hub maintainers files affected. time, hubs prefer allow modifications model output files within allowed submission window. Reflecting preferences, default, validate_pr() checks modification, renaming deletion previously submitted model output files deletion/renaming previously submitted model metadata files appends <error/check_error> class objects output file modification/deletion/renaming detected. however allow modifications model output files within allowed submission window. settings can modified required though use arguments file_modification_check allow_submit_window_mods. file_modification_check controls whether modification/deletion checks performed, returned modifications/deletions detected accepts one following values: \"error\": Appends <error/check_error> condition class object applicable modified/deleted file. result validation workflow failure. \"failure\": Appends <error/check_failure> condition class object applicable modified/deleted file. result validation workflow failure. \"message\": Appends <message/check_info> condition class object applicable modified/deleted file. result validation workflow failure. \"none\": modification/deletion checks performed. allow_submit_window_mods controls whether modifications/deletions model output files allowed within submission windows. set TRUE default can set FALSE modifications/deletions allowed, regardless timing. ignored checking model metadata files well file_modification_check set \"none\".","code":"temp_hub <- fs::path(tempdir(), \"mod_del_hub\") gert::git_clone(   url = \"https://github.com/hubverse-org/ci-testhub-simple\",   path = temp_hub,   branch = \"test-mod-del\" ) v <- validate_pr(   hub_path = temp_hub,   gh_repo = \"hubverse-org/ci-testhub-simple\",   pr_number = 6,   skip_submit_window_check = TRUE ) #> ℹ PR contains commits to additional files which have not been checked: #> • \".github/workflows/validate_submission.yaml\" #> • \"README.md\" #> • \"hub-config/admin.json\" #> • \"hub-config/model-metadata-schema.json\" #> • \"hub-config/tasks.json\" #> • \"model-metadata/README.md\" #> • \"model-output/hub-baseline/README.txt\" #> • \"random-file.txt\"  v #>  #> ── mod_del_hub ──── #>  #> ✔ [valid_config]: All hub config files are valid. #>  #>  #> ── 2022-10-08-hub-baseline.csv ──── #>  #>  #>  #> ⓧ [model_output_mod]: Previously submitted model output files must not be #>   modified.  model-output/hub-baseline/2022-10-08-hub-baseline.csv modified. #> ✔ [file_exists]: File exists at path #>   model-output/hub-baseline/2022-10-08-hub-baseline.csv. #> ✔ [file_name]: File name \"2022-10-08-hub-baseline.csv\" is valid. #> ✔ [file_location]: File directory name matches `model_id` metadata in file #>   name. #> ✔ [round_id_valid]: `round_id` is valid. #> ✔ [file_format]: File is accepted hub format. #> ✔ [file_n]: Number of accepted model output files per round met. #> ✔ [metadata_exists]: Metadata file exists at path #>   model-metadata/hub-baseline.yml. #> ✔ [file_read]: File could be read successfully. #> ✔ [valid_round_id_col]: `round_id_col` name is valid. #> ✔ [unique_round_id]: `round_id` column \"origin_date\" contains a single, unique #>   round ID value. #> ✔ [match_round_id]: All `round_id_col` \"origin_date\" values match submission #>   `round_id` from file name. #> ✔ [colnames]: Column names are consistent with expected round task IDs and std #>   column names. #> ✔ [col_types]: Column data types match hub schema. #> ✔ [valid_vals]: `tbl` contains valid values/value combinations. #> ✔ [rows_unique]: All combinations of task ID #>   column/`output_type`/`output_type_id` values are unique. #> ✔ [req_vals]: Required task ID/output type/output type ID combinations all #>   present. #> ✔ [value_col_valid]: Values in column `value` all valid with respect to #>   modeling task config. #> ✔ [value_col_non_desc]: Values in `value` column are non-decreasing as #>   output_type_ids increase for all unique task ID value/output type #>   combinations of quantile or cdf output types. #> ℹ [value_col_sum1]: No pmf output types to check for sum of 1. Check skipped. #> ℹ [spl_compound_taskid_set]: No v3 samples found in model output data to check. #>   Skipping `check_tbl_spl_compound_taskid_set` check. #> ℹ [spl_compound_tid]: No v3 samples found in model output data to check. #>   Skipping `check_tbl_spl_compound_tid` check. #> ℹ [spl_non_compound_tid]: No v3 samples found in model output data to check. #>   Skipping `check_tbl_spl_non_compound_tid` check. #> ℹ [spl_n]: No v3 samples found in model output data to check. Skipping #>   `check_tbl_spl_n` check. #>  #>  #> ── 2022-10-15-team1-goodmodel.csv ──── #>  #>  #>  #> ⓧ [model_output_mod_1]: Previously submitted model output files must not be #>   removed.  model-output/team1-goodmodel/2022-10-15-team1-goodmodel.csv #>   removed. #>  #>  #> ── team1-goodmodel.yaml ──── #>  #>  #>  #> ⓧ [model_metadata_mod]: Previously submitted model metadata files must not be #>   removed.  model-metadata/team1-goodmodel.yaml removed. #>  #>  #> ── 2022-10-22-team1-goodmodel.csv ──── #>  #>  #>  #> ✔ [file_exists_1]: File exists at path #>   model-output/team1-goodmodel/2022-10-22-team1-goodmodel.csv. #> ✔ [file_name_1]: File name \"2022-10-22-team1-goodmodel.csv\" is valid. #> ✔ [file_location_1]: File directory name matches `model_id` metadata in file #>   name. #> ✔ [round_id_valid_1]: `round_id` is valid. #> ✔ [file_format_1]: File is accepted hub format. #> ✔ [file_n_1]: Number of accepted model output files per round met. #> ✖ [metadata_exists_1]: Metadata file does not exist at path #>   model-metadata/team1-goodmodel.yml or model-metadata/team1-goodmodel.yaml. #> ✔ [file_read_1]: File could be read successfully. #> ✔ [valid_round_id_col_1]: `round_id_col` name is valid. #> ✔ [unique_round_id_1]: `round_id` column \"origin_date\" contains a single, #>   unique round ID value. #> ✔ [match_round_id_1]: All `round_id_col` \"origin_date\" values match submission #>   `round_id` from file name. #> ✔ [colnames_1]: Column names are consistent with expected round task IDs and #>   std column names. #> ✔ [col_types_1]: Column data types match hub schema. #> ✔ [valid_vals_1]: `tbl` contains valid values/value combinations. #> ✔ [rows_unique_1]: All combinations of task ID #>   column/`output_type`/`output_type_id` values are unique. #> ✔ [req_vals_1]: Required task ID/output type/output type ID combinations all #>   present. #> ✔ [value_col_valid_1]: Values in column `value` all valid with respect to #>   modeling task config. #> ✔ [value_col_non_desc_1]: Values in `value` column are non-decreasing as #>   output_type_ids increase for all unique task ID value/output type #>   combinations of quantile or cdf output types. #> ℹ [value_col_sum1_1]: No pmf output types to check for sum of 1. Check skipped. #> ℹ [spl_compound_taskid_set_1]: No v3 samples found in model output data to #>   check. Skipping `check_tbl_spl_compound_taskid_set` check. #> ℹ [spl_compound_tid_1]: No v3 samples found in model output data to check. #>   Skipping `check_tbl_spl_compound_tid` check. #> ℹ [spl_non_compound_tid_1]: No v3 samples found in model output data to check. #>   Skipping `check_tbl_spl_non_compound_tid` check. #> ℹ [spl_n_1]: No v3 samples found in model output data to check. Skipping #>   `check_tbl_spl_n` check."},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-pr.html","id":"warning-1","dir":"Articles","previous_headings":"Running validation checks on a Pull Request with validate_pr() > Configuring file modification/deletion/renaming checks","what":"Warning","title":"Validating Pull Requests on GitHub","text":"Note establish relative submission windows performing modification/deletion checks allow_submit_window_mods TRUE, reference date taken round_id extracted file path. extract dates columns deleted files. hub submission window reference dates match round IDs file paths, currently allow_submit_window_mods work correctly best set FALSE. relates hubs/rounds submission windows determined relative reference date explicit submission window start end dates provided config. details submission window config see Setting \"submission_due\" hubverse hubDocs.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-pr.html","id":"checking-for-validation-failures-with-check_for_errors","dir":"Articles","previous_headings":"","what":"Checking for validation failures with check_for_errors()","title":"Validating Pull Requests on GitHub","text":"check_for_errors() used inspect hub_validations class object, determine whether overall validations passed failed summarise detected errors/failures.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-pr.html","id":"validation-failure","dir":"Articles","previous_headings":"Checking for validation failures with check_for_errors()","what":"Validation failure","title":"Validating Pull Requests on GitHub","text":"elements hub_validations object contain <error/check_error>, <warning/check_warning> <error/check_exec_error> condition class objects, function throws error prints messages failing checks.","code":"temp_hub <- fs::path(tempdir(), \"invalid_sb_hub\") gert::git_clone(   url = \"https://github.com/hubverse-org/ci-testhub-simple\",   path = temp_hub,   branch = \"pr-missing-taskid\" )  v_fail <- validate_pr(   hub_path = temp_hub,   gh_repo = \"hubverse-org/ci-testhub-simple\",   pr_number = 5,   skip_submit_window_check = TRUE ) #> ℹ PR contains commits to additional files which have not been checked: #> • \".github/workflows/validate_submission.yaml\" #> • \"hub-config/admin.json\" #> • \"hub-config/model-metadata-schema.json\" #> • \"hub-config/tasks.json\"  check_for_errors(v_fail) #>  #> ── 2022-10-22-hub-baseline.parquet ──── #>  #> ⓧ [colnames]: Column names must be consistent with expected round task IDs and #>   std column names.  Expected column \"age_group\" not present in file. #> Error in `check_for_errors()`: #> !  #> The validation checks produced some failures/errors reported above."},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-pr.html","id":"validation-success","dir":"Articles","previous_headings":"Checking for validation failures with check_for_errors()","what":"Validation success","title":"Validating Pull Requests on GitHub","text":"validations checks pass, check_for_errors() returns TRUE silently prints:","code":"✔ All validation checks have been successful. temp_hub <- fs::path(tempdir(), \"valid_sb_hub\") gert::git_clone(   url = \"https://github.com/hubverse-org/ci-testhub-simple\",   path = temp_hub,   branch = \"pr-valid\" )  v_pass <- validate_pr(   hub_path = temp_hub,   gh_repo = \"hubverse-org/ci-testhub-simple\",   pr_number = 4,   skip_submit_window_check = TRUE ) #> ℹ PR contains commits to additional files which have not been checked: #> • \".github/workflows/validate_submission.yaml\" #> • \"hub-config/admin.json\" #> • \"hub-config/model-metadata-schema.json\" #> • \"hub-config/tasks.json\"  check_for_errors(v_pass) #> ✔ All validation checks have been successful."},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-pr.html","id":"verbose-output","dir":"Articles","previous_headings":"Checking for validation failures with check_for_errors()","what":"Verbose output","title":"Validating Pull Requests on GitHub","text":"printing results checks preferred instead just summarising results checks failed, argument verbose can set TRUE.","code":"check_for_errors(v_fail, verbose = TRUE) #>  #> ── Individual check results ── #>  #> ── invalid_sb_hub ──── #>  #> ✔ [valid_config]: All hub config files are valid. #>  #>  #> ── 2022-10-22-hub-baseline.parquet ──── #>  #>  #>  #> ✔ [file_exists]: File exists at path #>   model-output/hub-baseline/2022-10-22-hub-baseline.parquet. #> ✔ [file_name]: File name \"2022-10-22-hub-baseline.parquet\" is valid. #> ✔ [file_location]: File directory name matches `model_id` metadata in file #>   name. #> ✔ [round_id_valid]: `round_id` is valid. #> ✔ [file_format]: File is accepted hub format. #> ✔ [file_n]: Number of accepted model output files per round met. #> ✔ [metadata_exists]: Metadata file exists at path #>   model-metadata/hub-baseline.yml. #> ✔ [file_read]: File could be read successfully. #> ✔ [valid_round_id_col]: `round_id_col` name is valid. #> ✔ [unique_round_id]: `round_id` column \"origin_date\" contains a single, unique #>   round ID value. #> ✔ [match_round_id]: All `round_id_col` \"origin_date\" values match submission #>   `round_id` from file name. #> ⓧ [colnames]: Column names must be consistent with expected round task IDs and #>   std column names.  Expected column \"age_group\" not present in file. #>  #>  #> ── Overall validation result ─────────────────────────────────────────────────── #>  #>  #>  #> ── 2022-10-22-hub-baseline.parquet ──── #>  #>  #>  #> ⓧ [colnames]: Column names must be consistent with expected round task IDs and #>   std column names.  Expected column \"age_group\" not present in file. #> Error in `check_for_errors()`: #> !  #> The validation checks produced some failures/errors reported above.   check_for_errors(v_pass, verbose = TRUE) #>  #> ── Individual check results ── #>  #> ── valid_sb_hub ──── #>  #> ✔ [valid_config]: All hub config files are valid. #> ── 2022-10-22-team1-goodmodel.csv ──── #>  #> ✔ [file_exists]: File exists at path #>   model-output/team1-goodmodel/2022-10-22-team1-goodmodel.csv. #> ✔ [file_name]: File name \"2022-10-22-team1-goodmodel.csv\" is valid. #> ✔ [file_location]: File directory name matches `model_id` metadata in file #>   name. #> ✔ [round_id_valid]: `round_id` is valid. #> ✔ [file_format]: File is accepted hub format. #> ✔ [file_n]: Number of accepted model output files per round met. #> ✔ [metadata_exists]: Metadata file exists at path #>   model-metadata/team1-goodmodel.yaml. #> ✔ [file_read]: File could be read successfully. #> ✔ [valid_round_id_col]: `round_id_col` name is valid. #> ✔ [unique_round_id]: `round_id` column \"origin_date\" contains a single, unique #>   round ID value. #> ✔ [match_round_id]: All `round_id_col` \"origin_date\" values match submission #>   `round_id` from file name. #> ✔ [colnames]: Column names are consistent with expected round task IDs and std #>   column names. #> ✔ [col_types]: Column data types match hub schema. #> ✔ [valid_vals]: `tbl` contains valid values/value combinations. #> ✔ [rows_unique]: All combinations of task ID #>   column/`output_type`/`output_type_id` values are unique. #> ✔ [req_vals]: Required task ID/output type/output type ID combinations all #>   present. #> ✔ [value_col_valid]: Values in column `value` all valid with respect to #>   modeling task config. #> ✔ [value_col_non_desc]: Values in `value` column are non-decreasing as #>   output_type_ids increase for all unique task ID value/output type #>   combinations of quantile or cdf output types. #> ℹ [value_col_sum1]: No pmf output types to check for sum of 1. Check skipped. #> ℹ [spl_compound_taskid_set]: No v3 samples found in model output data to check. #>   Skipping `check_tbl_spl_compound_taskid_set` check. #> ℹ [spl_compound_tid]: No v3 samples found in model output data to check. #>   Skipping `check_tbl_spl_compound_tid` check. #> ℹ [spl_non_compound_tid]: No v3 samples found in model output data to check. #>   Skipping `check_tbl_spl_non_compound_tid` check. #> ℹ [spl_n]: No v3 samples found in model output data to check. Skipping #>   `check_tbl_spl_n` check. #> ── Overall validation result ─────────────────────────────────────────────────── #> ✔ All validation checks have been successful."},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-pr.html","id":"validate_pr-check-details","dir":"Articles","previous_headings":"","what":"validate_pr check details","title":"Validating Pull Requests on GitHub","text":"details structure <hub_validations> objects, including access information specific checks, see vignette(\"articles/hub-validations-class\").","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-pr.html","id":"checks-on-model-output-files","dir":"Articles","previous_headings":"validate_pr check details","what":"Checks on model output files","title":"Validating Pull Requests on GitHub","text":"Details checks performed validate_submission() model output files.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-pr.html","id":"checks-on-model-metadata-files","dir":"Articles","previous_headings":"validate_pr check details","what":"Checks on model metadata files","title":"Validating Pull Requests on GitHub","text":"Details checks performed validate_model_metadata() model metadata files.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-pr.html","id":"custom-checks","dir":"Articles","previous_headings":"validate_pr check details > Checks on model metadata files","what":"Custom checks","title":"Validating Pull Requests on GitHub","text":"standard checks discussed checks deployed default validate_pr function. information deploying optional custom functions please check article deploying custom functions (vignette(\"articles/deploying-custom-functions\")).","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-submission.html","id":"validating-model-output-files-with-validate_submission","dir":"Articles","previous_headings":"","what":"Validating model output files with validate_submission()","title":"Validating submissions locally","text":"hubs automated validation systems set check contributions submission, hubValidations also provides functionality validating files locally submitting . , submitting teams can use validate_submission() validate model output files prior submitting. function takes relative path, relative model output directory, argument file_path, performs series standard validation checks returns results form hub_validations S3 class object. details structure <hub_validations> objects, including access information individual checks, see vignette(\"articles/hub-validations-class\").","code":"hub_path <- system.file(\"testhubs/simple\", package = \"hubValidations\")  validate_submission(hub_path,   file_path = \"team1-goodmodel/2022-10-08-team1-goodmodel.csv\" ) #>  #> ── simple ──── #>  #> ✔ [valid_config]: All hub config files are valid. #>  #>  #> ── 2022-10-08-team1-goodmodel.csv ──── #>  #>  #>  #> ✔ [file_exists]: File exists at path #>   model-output/team1-goodmodel/2022-10-08-team1-goodmodel.csv. #> ✔ [file_name]: File name \"2022-10-08-team1-goodmodel.csv\" is valid. #> ✔ [file_location]: File directory name matches `model_id` metadata in file #>   name. #> ✔ [round_id_valid]: `round_id` is valid. #> ✔ [file_format]: File is accepted hub format. #> ✔ [file_n]: Number of accepted model output files per round met. #> ✔ [metadata_exists]: Metadata file exists at path #>   model-metadata/team1-goodmodel.yaml. #> ✔ [file_read]: File could be read successfully. #> ✔ [valid_round_id_col]: `round_id_col` name is valid. #> ✔ [unique_round_id]: `round_id` column \"origin_date\" contains a single, unique #>   round ID value. #> ✔ [match_round_id]: All `round_id_col` \"origin_date\" values match submission #>   `round_id` from file name. #> ✔ [colnames]: Column names are consistent with expected round task IDs and std #>   column names. #> ✔ [col_types]: Column data types match hub schema. #> ✔ [valid_vals]: `tbl` contains valid values/value combinations. #> ✔ [rows_unique]: All combinations of task ID #>   column/`output_type`/`output_type_id` values are unique. #> ✔ [req_vals]: Required task ID/output type/output type ID combinations all #>   present. #> ✔ [value_col_valid]: Values in column `value` all valid with respect to #>   modeling task config. #> ✔ [value_col_non_desc]: Values in `value` column are non-decreasing as #>   output_type_ids increase for all unique task ID value/output type #>   combinations of quantile or cdf output types. #> ℹ [value_col_sum1]: No pmf output types to check for sum of 1. Check skipped. #> ✖ [submission_time]: Submission time must be within accepted submission window #>   for round.  Current time \"2024-11-06 19:35:19 UTC\" is outside window #>   2022-10-02 EDT--2022-10-09 23:59:59 EDT."},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-submission.html","id":"validation-early-return","dir":"Articles","previous_headings":"Validating model output files with validate_submission()","what":"Validation early return","title":"Validating submissions locally","text":"checks critical downstream checks cause validation stop return results checks including critical check failed early. generally return <error/check_error> condition class object. problems identified need resolved function re-run validation proceed .","code":"hub_path <- system.file(\"testhubs/simple\", package = \"hubValidations\")  validate_submission(hub_path,   file_path = \"team1-goodmodel/2022-10-15-hub-baseline.csv\" ) #>  #> ── simple ──── #>  #> ✔ [valid_config]: All hub config files are valid. #>  #>  #> ── 2022-10-15-hub-baseline.csv ──── #>  #>  #>  #> ✔ [file_exists]: File exists at path #>   model-output/team1-goodmodel/2022-10-15-hub-baseline.csv. #> ✔ [file_name]: File name \"2022-10-15-hub-baseline.csv\" is valid. #> ✖ [file_location]: File directory name must match `model_id` metadata in file #>   name.  File should be submitted to directory \"hub-baseline\" not #>   \"team1-goodmodel\" #> ✔ [round_id_valid]: `round_id` is valid. #> ✔ [file_format]: File is accepted hub format. #> ✔ [file_n]: Number of accepted model output files per round met. #> ✔ [metadata_exists]: Metadata file exists at path #>   model-metadata/hub-baseline.yml. #> ✔ [file_read]: File could be read successfully. #> ✔ [valid_round_id_col]: `round_id_col` name is valid. #> ✔ [unique_round_id]: `round_id` column \"origin_date\" contains a single, unique #>   round ID value. #> ⓧ [match_round_id]: All `round_id_col` \"origin_date\" values must match #>   submission `round_id` from file name.  `round_id` value 2022-10-08 does not #>   match submission `round_id` \"2022-10-15\" #> ✖ [submission_time]: Submission time must be within accepted submission window #>   for round.  Current time \"2024-11-06 19:35:21 UTC\" is outside window #>   2022-10-02 EDT--2022-10-09 23:59:59 EDT."},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-submission.html","id":"execution-errors","dir":"Articles","previous_headings":"Validating model output files with validate_submission()","what":"Execution Errors","title":"Validating submissions locally","text":"execution error occurs checks, <error/check_exec_error> returned instead. validation purposes, results downstream effects <error/check_error> object.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-submission.html","id":"checking-for-errors-with-check_for_errors","dir":"Articles","previous_headings":"Validating model output files with validate_submission()","what":"Checking for errors with check_for_errors()","title":"Validating submissions locally","text":"can check whether file overall pass validation checks passing hub_validations object check_for_errors(). validation fails, error thrown failing checks summarised.","code":"validate_submission(hub_path,   file_path = \"team1-goodmodel/2022-10-08-team1-goodmodel.csv\" ) %>%   check_for_errors() #>  #> ── 2022-10-08-team1-goodmodel.csv ──── #>  #> ✖ [submission_time]: Submission time must be within accepted submission window #>   for round.  Current time \"2024-11-06 19:35:22 UTC\" is outside window #>   2022-10-02 EDT--2022-10-09 23:59:59 EDT. #> Error in `check_for_errors()`: #> !  #> The validation checks produced some failures/errors reported above."},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-submission.html","id":"skipping-the-submission-window-check","dir":"Articles","previous_headings":"Validating model output files with validate_submission()","what":"Skipping the submission window check","title":"Validating submissions locally","text":"preparing submission prior submission window opening, might want skip submission window check. can setting argument skip_submit_window_check TRUE. results previous valid file (except failing validation window check) now passing overall validation.","code":"validate_submission(hub_path,   file_path = \"team1-goodmodel/2022-10-08-team1-goodmodel.csv\",   skip_submit_window_check = TRUE ) %>%   check_for_errors() #> ✔ All validation checks have been successful."},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-submission.html","id":"ignoring-derived-task-ids-to-improve-validation-performance","dir":"Articles","previous_headings":"Validating model output files with validate_submission()","what":"Ignoring derived task IDs to improve validation performance","title":"Validating submissions locally","text":"Argument derived_task_ids allows specification task IDs derived task IDs ignored, can often lead significant improvement validation performance.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-submission.html","id":"what-are-derived-task-ids","dir":"Articles","previous_headings":"Validating model output files with validate_submission() > Ignoring derived task IDs to improve validation performance","what":"What are derived task IDs?","title":"Validating submissions locally","text":"Derived task IDs class task ID whose values depend values task IDs. , validity derived task ID values dependent values task IDs derived validity value combinations derived task IDs much restricted. common example derived task ID target_end_date often derived reference_date origin_date horizon task ids.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-submission.html","id":"implications-of-derived-task-ids-on-validation-performance","dir":"Articles","previous_headings":"Validating model output files with validate_submission() > Ignoring derived task IDs to improve validation performance","what":"Implications of derived task IDs on validation performance","title":"Validating submissions locally","text":"standard validation, derived task IDs like target_end_date tend pollute expanded grid used validate valid value combination invalid combinations. ’s , given combination reference_date horizon values single valid target_end_date value, target_end_date property config contain possible valid values combinations reference_date horizon. values config used create expanded valid values grid, sizes grids can reach function config complexity can often put excessive strain system’s memory, affecting overall performance submission validation.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-submission.html","id":"how-to-ignore-derived-task-ids","dir":"Articles","previous_headings":"Validating model output files with validate_submission() > Ignoring derived task IDs to improve validation performance","what":"How to ignore derived task IDs","title":"Validating submissions locally","text":"Supplying names derived task IDs argument derived_task_ids ignore validation checks , depending config complexity, can lead significant improvement validation performance.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-submission.html","id":"validate_submission-check-details","dir":"Articles","previous_headings":"Validating model output files with validate_submission()","what":"validate_submission check details","title":"Validating submissions locally","text":"Details checks performed validate_submission()","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-submission.html","id":"validating-model-metadata-files-with-validate_model_metadata","dir":"Articles","previous_headings":"","what":"Validating model metadata files with validate_model_metadata()","title":"Validating submissions locally","text":"want check model metadata file submitting, can similarly use function validate_model_metadata(). function takes model metadata file name argument file_path, performs series validation checks returns results form hub_validations S3 class object. details structure <hub_validations> objects, including access information individual checks, see vignette(\"articles/hub-validations-class\").","code":"validate_model_metadata(hub_path,   file_path = \"hub-baseline.yml\" ) #>  #> ── model-metadata-schema.json ──── #>  #> ✔ [metadata_schema_exists]: File exists at path #>   hub-config/model-metadata-schema.json. #>  #>  #> ── hub-baseline.yml ──── #>  #>  #>  #> ✔ [metadata_file_exists]: File exists at path model-metadata/hub-baseline.yml. #> ✔ [metadata_file_ext]: Metadata file extension is \"yml\" or \"yaml\". #> ✔ [metadata_file_location]: Metadata file directory name matches #>   \"model-metadata\". #> ✔ [metadata_matches_schema]: Metadata file contents are consistent with schema #>   specifications. #> ✔ [metadata_file_name]: Metadata file name matches the `model_id` specified #>   within the metadata file.  validate_model_metadata(hub_path,   file_path = \"team1-goodmodel.yaml\" ) #>  #> ── model-metadata-schema.json ──── #>  #> ✔ [metadata_schema_exists]: File exists at path #>   hub-config/model-metadata-schema.json. #> ── team1-goodmodel.yaml ──── #>  #> ✔ [metadata_file_exists]: File exists at path #>   model-metadata/team1-goodmodel.yaml. #> ✔ [metadata_file_ext]: Metadata file extension is \"yml\" or \"yaml\". #> ✔ [metadata_file_location]: Metadata file directory name matches #>   \"model-metadata\". #> ⓧ [metadata_matches_schema]: Metadata file contents must be consistent with #>   schema specifications.  - must have required property 'model_details' . - #>   must NOT have additional properties; saw unexpected property #>   'models_details'. - must NOT have additional properties; saw unexpected #>   property 'ensemble_of_hub_models\"'. - /include_ensemble must be boolean ."},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-submission.html","id":"validate_model_metadata-check-details","dir":"Articles","previous_headings":"Validating model metadata files with validate_model_metadata()","what":"validate_model_metadata check details","title":"Validating submissions locally","text":"Details checks performed validate_model_metadata()","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/validate-submission.html","id":"custom-checks","dir":"Articles","previous_headings":"Validating model metadata files with validate_model_metadata() > validate_model_metadata check details","what":"Custom checks","title":"Validating submissions locally","text":"standard checks discussed checks deployed default validate_submission validate_model_metadata functions. information deploying optional/custom functions functions require configuration please check article including custom functions (vignette(\"articles/deploying-custom-functions\")).","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/writing-custom-fns.html","id":"anatomy-of-a-check-function","dir":"Articles","previous_headings":"","what":"Anatomy of a check function","title":"Writing custom validation functions","text":"source code existing hubValidations check_*() functions can good place start writing custom check functions, important understand structure check function, particularly expected inputs outputs. ’s basic, custom check function : take set inputs validated evaluate whether condition met return appropriate check condition object addition, check condition met, ’s also helpful capture details can guide users towards specifics failure fix general, hubValidations check functions evaluate conditions respect one following: Model output submission files Model output submission file content (.e data) Model metadata files","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/writing-custom-fns.html","id":"create_custom_check-for-creating-custom-check-function-templates","dir":"Articles","previous_headings":"","what":"create_custom_check() for creating custom check function templates","title":"Writing custom validation functions","text":"help get started right path, also provide function create_custom_check() creating basic custom check function template. function requires name new custom check function, e.g. \"example_check\". creates .R script file named function (example_check.R) saves hub recommended location: src/validations/R/. script contains basic skeleton code create custom check function called example_check. output create_custom_check() can also parametarised number arguments include additional template code snippets (see examples). Let’s take look basic structure custom check function created create_custom_check(). ’ll start creating temporary “hub” us work , existing hub, can work . contents created file src/validations/R/cstm_check_tbl_basic.R follows:","code":"hub_path <- withr::local_tempdir()  create_custom_check(\"cstm_check_tbl_basic\",   hub_path = hub_path ) #> ✔ Directory /tmp/Rtmpo62g7J/file1e7955f1c681/src/validations/R created. #> ✔ Custom validation check template function file \"cstm_check_tbl_basic.R\" created. #> → Edit the function template to add your custom check logic. #> ℹ See the Writing custom check functions article for more information. #> (<https://hubverse-org.github.io/hubValidations/articles/writing-custom-fns.html>) cstm_check_tbl_basic <- function(tbl, file_path) {   # Here you can write your custom check logic   # Assign the result as `TRUE` or `FALSE` to object called `check`.   # If `check` is `TRUE`, the check will pass.    check <- condition_to_be_TRUE_for_check_to_pass    if (check) {     details <- NULL   } else {     # You can use details messages to pass on helpful information to users about     # what caused the validation failure and how to locate affected data.     details <- cli::format_inline(\"{.var round_id} value {.val invalid} is invalid.\")   }    hubValidations::capture_check_cnd(     check = check,     file_path = file_path,     msg_subject = \"{.var round_id}\",     msg_attribute = \"valid.\",     error = FALSE,     details = details   ) }"},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/writing-custom-fns.html","id":"function-naming-conventions","dir":"Articles","previous_headings":"create_custom_check() for creating custom check function templates","what":"Function naming conventions","title":"Writing custom validation functions","text":"recommend following naming conventions used hubValidations. distinguish hubValidations package functions custom ones, recommend prefixing custom function names additional prefix, e.g. cstm_ cs. cstm_check_file_* checks operate model output files (e.g. file location, name etc). cstm_check_tbl_* checks operate tibble model output data (.e. contents file). cstm_check_meta_* checks operate model metadata files. cstm_check_submission_* checks operate high level properties submission (e.g. timing). cstm_check_config_* checks operate hub configuration files. cstm_check_valid_* checks don’t fit categories. Neither recommendations required custom functions work, consistency important aspect maintaining hub.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/writing-custom-fns.html","id":"function-inputs-arguments","dir":"Articles","previous_headings":"","what":"Function inputs / arguments","title":"Writing custom validation functions","text":"minimum inputs required custom check function depend type check performed. file_path: relative path submission file validated required check functions. file_path must therefore included argument custom check function. tbl tbl_chr: tibble representation contents model output submission—column data types matching hub schema (tbl) character version (tbl_chr)—also required checks operate data submission file. Since file_path tbl common inputs check functions, create_custom_check() includes arguments default. means custom check function include objects function call environment default. Keep mind tbl tbl_chr available calling validate_model_data(), validate_model_metadata() validate_model_file(). Therefore, default create_custom_check() function designed checks run validate_model_data(). ’re running custom check validate_model_data(), remove tbl function arguments. custom check run validate_model_data() needs model output file contents, can use hubValidations::read_model_out_file(file_path) within function body read . addition , custom check functions can also additional arguments inputs required check. inputs available check caller environment can passed automatically custom check function including argument name input object required custom function formals. inputs can passed explicitly function arguments functions args field configuring validations.yml file.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/writing-custom-fns.html","id":"arguments-available-in-the-caller-environment","dir":"Articles","previous_headings":"Function inputs / arguments","what":"Arguments available in the caller environment","title":"Writing custom validation functions","text":"validate_*() functions contain number standard objects call environment available downstream check functions use arguments passed automatically arguments optional/custom functions name. Therefore, values arguments need including function deployment configuration can overridden function’s args configuration validations.yml deployment. validate_*() functions contain following five objects caller environment: file_path: character string path file validated relative model-output directory. hub_path: character string path hub. round_id: character string round_id derived model file name. file_meta: named list containing round_id, team_abbr, model_abbr model_id details. validations_cfg_path: character string path validations.yml file. Defaults hub-config/validations.yml. validate_model_data() contain following additional objects: tbl: tibble model output data validated. tbl_chr: tibble model output data validated columns coerced character type. round_id_col: character string name tbl column containing round_id information. Defaults NULL usually determined tasks.json config applicable unless explicitly provided argument validate_model_data(). output_type_id_datatype: character string. value output_type_id_datatype argument. value useful functions like hubData::create_hub_schema() hubValidations::expand_model_out_grid() set data type output_type_id column. derived_task_ids: character vector NULL. value derived_task_ids argument, .e. names task IDs whose values depend task IDs. args configuration can used override objects caller environment well defaults deployment. Note , writing custom functions, objects need specified arguments function definition. ones custom function actually requires inputs.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/writing-custom-fns.html","id":"additional-arguments","dir":"Articles","previous_headings":"Function inputs / arguments","what":"Additional arguments","title":"Writing custom validation functions","text":"can add additional arguments custom check functions pass values including args configuration validations.yml file. values passed custom check function hubValidations function called. add additional arguments custom check function, also add input checks start function ensure inputs valid. checkmate package contains wide range functions checking inputs. example, optional check opt_check_tbl_col_timediff() (deployed exactly fashion custom functions, .e. validations.yml file) takes additional arguments t0_colname, t1_colname timediff. can add example extra argument extra_args = TRUE creating custom check function create_custom_check(). adds extra example argument extra_arg custom check function formals well example input check top function body.","code":"opt_check_tbl_col_timediff function (tbl, file_path, hub_path, t0_colname, t1_colname, timediff = lubridate::weeks(2),      output_type_id_datatype = c(\"from_config\", \"auto\", \"character\",          \"double\", \"integer\", \"logical\", \"Date\"))  {     checkmate::assert_class(timediff, \"Period\")     checkmate::assert_scalar(timediff)     checkmate::assert_character(t0_colname, len = 1L)     checkmate::assert_character(t1_colname, len = 1L)     checkmate::assert_choice(t0_colname, choices = names(tbl))     checkmate::assert_choice(t1_colname, choices = names(tbl))     config_tasks <- hubUtils::read_config(hub_path, \"tasks\")     output_type_id_datatype <- rlang::arg_match(output_type_id_datatype)     schema <- hubData::create_hub_schema(config_tasks, partitions = NULL,          r_schema = TRUE, output_type_id_datatype = output_type_id_datatype)     assert_column_date(t0_colname, schema)     assert_column_date(t1_colname, schema)     tbl <- subset_check_tbl(tbl, c(t0_colname, t1_colname))     if (nrow(tbl) == 0) {         return(capture_check_info(file_path = file_path, msg = \"No relevant data to check. Check skipped.\"))     }     if (!lubridate::is.Date(tbl[[t0_colname]])) {         tbl[, t0_colname] <- as.Date(tbl[[t0_colname]])     }     if (!lubridate::is.Date(tbl[[t1_colname]])) {         tbl[, t1_colname] <- as.Date(tbl[[t1_colname]])     }     compare <- tbl[[t1_colname]] - tbl[[t0_colname]] == timediff     check <- all(compare)     if (check) {         details <- NULL     }     else {         details <- cli::format_inline(\"t1 var value{?s} {.val {tbl[[t1_colname]][!compare]}} invalid.\")     }     capture_check_cnd(check = check, file_path = file_path, msg_subject = cli::format_inline(\"Time differences between t0 var {.var {t0_colname}} and t1 var\\n        {.var {t1_colname}}\"),          msg_verbs = c(\"all match\", \"do not all match\"), msg_attribute = cli::format_inline(\"expected period of {.val {timediff}}.\"),          details = details) } <bytecode: 0x558e4f507188> <environment: namespace:hubValidations> create_custom_check(\"cstm_check_tbl_args\",   hub_path = hub_path,   extra_args = TRUE ) #> ✔ Custom validation check template function file \"cstm_check_tbl_args.R\" created. #> → Edit the function template to add your custom check logic. #> ℹ See the Writing custom check functions article for more information. #> (<https://hubverse-org.github.io/hubValidations/articles/writing-custom-fns.html>) cstm_check_tbl_args <- function(tbl, file_path, extra_arg = NULL) {   # If you're providing additional custom arguments, make sure to include input checks   # at the top of your function. `checkmate` package provides a simple interface   # for many useful basic checks and is available through hubValidations.   # The following example checks that `extra_arg` is a single character string.   checkmate::assert_character(extra_arg, len = 1L, null.ok)    # Here you can write your custom check logic   # Assign the result as `TRUE` or `FALSE` to object called `check`.   # If `check` is `TRUE`, the check will pass.    check <- condition_to_be_TRUE_for_check_to_pass    if (check) {     details <- NULL   } else {     # You can use details messages to pass on helpful information to users about     # what caused the validation failure and how to locate affected data.     details <- cli::format_inline(\"{.var round_id} value {.val invalid} is invalid.\")   }    hubValidations::capture_check_cnd(     check = check,     file_path = file_path,     msg_subject = \"{.var round_id}\",     msg_attribute = \"valid.\",     error = FALSE,     details = details   ) }"},{"path":[]},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/writing-custom-fns.html","id":"capturing-and-returning-check-results-with-capture_check_cnd","dir":"Articles","previous_headings":"Function output","what":"Capturing and returning check results with capture_check_cnd()","title":"Writing custom validation functions","text":"capture_check_cnd() function used return check condition (success, failure, error) ’s output custom check function return cases (see exception). function returns <hub_check> class object depending value passed check argument, represents summary condition checked given validation function. value passed check TRUE, function returns <message/check_success> class object. value FALSE, output depends error argument. error FALSE (default), function returns <error/check_failure> class object, indicates check failed. error TRUE, function returns <error/check_error> class object, indicates check failed additionally causes execution custom validation functions halt. Set error = TRUE downstream checks run current check fails.","code":"create_custom_check(\"cstm_check_tbl_error\",   hub_path = hub_path, error = TRUE ) #> ✔ Custom validation check template function file \"cstm_check_tbl_error.R\" created. #> → Edit the function template to add your custom check logic. #> ℹ See the Writing custom check functions article for more information. #> (<https://hubverse-org.github.io/hubValidations/articles/writing-custom-fns.html>) cstm_check_tbl_error <- function(tbl, file_path) {   # Here you can write your custom check logic   # Assign the result as `TRUE` or `FALSE` to object called `check`.   # If `check` is `TRUE`, the check will pass.    check <- condition_to_be_TRUE_for_check_to_pass    if (check) {     details <- NULL   } else {     # You can use details messages to pass on helpful information to users about     # what caused the validation failure and how to locate affected data.     details <- cli::format_inline(\"{.var round_id} value {.val invalid} is invalid.\")   }    hubValidations::capture_check_cnd(     check = check,     file_path = file_path,     msg_subject = \"{.var round_id}\",     msg_attribute = \"valid.\",     error = TRUE,     details = details   ) }"},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/writing-custom-fns.html","id":"skipping-checks-and-returning-a-message-with-capture_check_info","dir":"Articles","previous_headings":"Function output","what":"Skipping checks and returning a message with capture_check_info()","title":"Writing custom validation functions","text":"Sometimes check function might always applicable pre-condition needs met main check performed. pre-condition met, check usually skipped. checks, function return <message/check_info> object, generated capture_check_info() function. Use msg argument explain check skipped . example, check_tbl_value_col_ascending() check function validates values ascending arranged increasing output_type_id order applicable cdf quantile output types. proceeding main check, function first checks whether model output tbl contains data cdf quantile output types. , check skipped. can add pre-condition check block code argument conditional = TRUE creating custom check function create_custom_check().","code":"capture_check_info(   \"modelA-teamA/2024-09-12-modelA-teamA\",   \"Condition for running this check was not met. Skipped.\" ) #> <message/check_info> #> Message: #> Condition for running this check was not met. Skipped. check_tbl_value_col_ascending function (tbl, file_path)  {     if (all(!c(\"cdf\", \"quantile\") %in% tbl[[\"output_type\"]])) {         return(capture_check_info(file_path, \"No quantile or cdf output types to check for non-descending values.\\n        Check skipped.\"))     }     output_type_tbl <- split(tbl, tbl[[\"output_type\"]])[c(\"cdf\",          \"quantile\")] %>% purrr::compact()     error_tbl <- purrr::map(output_type_tbl, check_values_ascending) %>%          purrr::list_rbind()     check <- nrow(error_tbl) == 0L     if (check) {         details <- NULL         error_tbl <- NULL     }     else {         details <- cli::format_inline(\"See {.var error_tbl} attribute for details.\")     }     capture_check_cnd(check = check, file_path = file_path, msg_subject = \"Values in {.var value} column\",          msg_verbs = c(\"are non-decreasing\", \"are not non-decreasing\"),          msg_attribute = \"as output_type_ids increase for all unique task ID\\n    value/output type combinations of quantile or cdf output types.\",          details = details, error_tbl = error_tbl) } <bytecode: 0x558e558844b8> <environment: namespace:hubValidations> create_custom_check(\"cstm_check_tbl_skip\",   hub_path = hub_path,   conditional = TRUE ) #> ✔ Custom validation check template function file \"cstm_check_tbl_skip.R\" created. #> → Edit the function template to add your custom check logic. #> ℹ See the Writing custom check functions article for more information. #> (<https://hubverse-org.github.io/hubValidations/articles/writing-custom-fns.html>) cstm_check_tbl_skip <- function(tbl, file_path) {   if (!condition) {     return(       capture_check_info(         file_path,         \"Condition for running this check was not met. Skipped.\"       )     )   }    # Here you can write your custom check logic   # Assign the result as `TRUE` or `FALSE` to object called `check`.   # If `check` is `TRUE`, the check will pass.    check <- condition_to_be_TRUE_for_check_to_pass    if (check) {     details <- NULL   } else {     # You can use details messages to pass on helpful information to users about     # what caused the validation failure and how to locate affected data.     details <- cli::format_inline(\"{.var round_id} value {.val invalid} is invalid.\")   }    hubValidations::capture_check_cnd(     check = check,     file_path = file_path,     msg_subject = \"{.var round_id}\",     msg_attribute = \"valid.\",     error = FALSE,     details = details   ) }"},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/writing-custom-fns.html","id":"loading-config-files","dir":"Articles","previous_headings":"","what":"Loading config files","title":"Writing custom validation functions","text":"Many checks conditioned information stored hub configuration files often read start custom check function. easiest way make hub configuration information available within function pass hub_path caller environment object specifying function argument use hubUtils::read_config(hub_path) read tasks.json configuration file. can add config = TRUE argument creating custom check function create_custom_check() include hub_path argument insert code snippet custom check function skeleton reads tasks.json hub configuration file.","code":"create_custom_check(\"cstm_check_tbl_config\",   hub_path = hub_path,   config = TRUE ) #> ✔ Custom validation check template function file \"cstm_check_tbl_config.R\" created. #> → Edit the function template to add your custom check logic. #> ℹ See the Writing custom check functions article for more information. #> (<https://hubverse-org.github.io/hubValidations/articles/writing-custom-fns.html>) cstm_check_tbl_config <- function(tbl, file_path, hub_path) {   config_tasks <- hubUtils::read_config(hub_path)    # Here you can write your custom check logic   # Assign the result as `TRUE` or `FALSE` to object called `check`.   # If `check` is `TRUE`, the check will pass.    check <- condition_to_be_TRUE_for_check_to_pass    if (check) {     details <- NULL   } else {     # You can use details messages to pass on helpful information to users about     # what caused the validation failure and how to locate affected data.     details <- cli::format_inline(\"{.var round_id} value {.val invalid} is invalid.\")   }    hubValidations::capture_check_cnd(     check = check,     file_path = file_path,     msg_subject = \"{.var round_id}\",     msg_attribute = \"valid.\",     error = FALSE,     details = details   ) }"},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/writing-custom-fns.html","id":"custom-function-dependencies","dir":"Articles","previous_headings":"","what":"Custom function dependencies","title":"Writing custom validation functions","text":"writing functions might want use functions packages.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/writing-custom-fns.html","id":"available-dependencies","dir":"Articles","previous_headings":"","what":"Available dependencies","title":"Writing custom validation functions","text":"hubValidations exported functions available use custom check functions well functions hubverse packages huUtils, hubAdmin hubData. addition, functions packages hubValidations dependency tree also generally available, locally (hubValidations installed) hubverse validate-submission GitHub Action. Functions packages can used custom checks without specifying additional dependencies.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/writing-custom-fns.html","id":"additional-dependencies","dir":"Articles","previous_headings":"","what":"Additional dependencies","title":"Writing custom validation functions","text":"custom functions deploying depend additional packages, need ensure packages available validation. simplest way ensure available edit setup-r-dependencies step hubverse-actions validate-submission.yaml GitHub Action workflow hub add additional dependency packages field list. following pseudo example add additionalPackage package list standard dependencies: Note ensures additional dependency available validation GitHub guarantee installed locally hub administrators submitting teams. Indeed missing dependencies lead execution errors custom checks running validate_submission() locally. use documentation, like hub’s README communicate additional required dependencies validation submitting teams. Even better, add check top function catch missing dependencies provide helpful error message user.","code":"- uses: r-lib/actions/setup-r-dependencies@v2         with:           packages: |             any::hubValidations             any::sessioninfo             any::additionalPackage"},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/writing-custom-fns.html","id":"managing-custom-check-functions-as-a-package","dir":"Articles","previous_headings":"","what":"Managing custom check functions as a package","title":"Writing custom validation functions","text":"simplest way manage custom check functions store scripts src/validations/R directory root hub source validation specifying path custom functions file via source: property validations.yml. Alternatively, manage custom functions package. can easily turn contents src/validations local validations R package : allow : Make functions available locally users use pak::local_install(\"src/validations\") hub root install validations package. Manage additional dependencies required custom functions formally DESCRIPTION file. Formally test custom functions using testthat tests tests/testthat directory.","code":"usethis::create_package(\"src/validations\", open = FALSE)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/articles/writing-custom-fns.html","id":"deploying-custom-functions-as-a-package","dir":"Articles","previous_headings":"Managing custom check functions as a package","what":"Deploying custom functions as a package","title":"Writing custom validation functions","text":"deploy custom functions managed package src/validations, can use pkg configuration property validations.yml file specify package namespace. example, created simple package src/validations/ cstm_check_tbl_example.R script containing specification cstm_check_tbl_example() function src/validations/R, can use following configuration validation.yml file source function installed validations package namespace: ensure package (additional dependencies depends ) installed available validation, must add package setup-r-dependencies step hubverse-actions validate-submission.yaml GitHub Action workflow hub like : want share custom functions across multiple hubs, even consider separating standalone package hosting GitHub.","code":"default:     validate_model_data:       custom_check:         fn: \"cstm_check_tbl_example\"         pkg: \"validations\" - uses: r-lib/actions/setup-r-dependencies@v2         with:           packages: |             any::hubValidations             any::sessioninfo             local::./src/validations"},{"path":"https://hubverse-org.github.io/hubValidations/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Anna Krystalli. Author, maintainer. Evan Ray. Author. Hugo Gruson. Author. Zhian N. Kamvar. Contributor. Consortium Infectious Disease Modeling Hubs. Copyright holder.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Krystalli , Ray E, Gruson H (2024). hubValidations: Testing framework hubverse hub validations. R package version 0.8.0.9000, https://hubverse-org.github.io/hubValidations/, https://github.com/hubverse-org/hubValidations.","code":"@Manual{,   title = {hubValidations: Testing framework for hubverse hub validations},   author = {Anna Krystalli and Evan Ray and Hugo Gruson},   year = {2024},   note = {R package version 0.8.0.9000,     https://hubverse-org.github.io/hubValidations/},   url = {https://github.com/hubverse-org/hubValidations}, }"},{"path":"https://hubverse-org.github.io/hubValidations/dev/index.html","id":"hubvalidations-","dir":"","previous_headings":"","what":"Testing framework for hubverse hub validations","title":"Testing framework for hubverse hub validations","text":"goal hubValidations provide testing framework performing hubverse hub validations.","code":""},{"path":[]},{"path":"https://hubverse-org.github.io/hubValidations/dev/index.html","id":"latest","dir":"","previous_headings":"Installation","what":"Latest","title":"Testing framework for hubverse hub validations","text":"can install latest version hubValidations R-universe:","code":"install.packages(\"hubValidations\", repos = c(\"https://hubverse-org.r-universe.dev\", \"https://cloud.r-project.org\"))"},{"path":"https://hubverse-org.github.io/hubValidations/dev/index.html","id":"development","dir":"","previous_headings":"Installation","what":"Development","title":"Testing framework for hubverse hub validations","text":"want test new features yet released, can install development version hubValidations GitHub : [!NOTE] hubValidations dependency arrow package. troubleshooting arrow installation problems, please consult arrow package documentation. also try installing package Apache R Universe repository :","code":"remotes::install_github(\"hubverse-org/hubValidations\") install.packages(\"arrow\", repos = c(\"https://apache.r-universe.dev\", \"https://cran.r-project.org\"))"},{"path":"https://hubverse-org.github.io/hubValidations/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Testing framework for hubverse hub validations","text":"Please note hubValidations package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Testing framework for hubverse hub validations","text":"Interested contributing back open-source Hubverse project? Learn get involved Hubverse Community contribute hubValidations.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/index.html","id":"contributing-new-check-functions","dir":"","previous_headings":"Contributing","what":"Contributing new check functions","title":"Testing framework for hubverse hub validations","text":"submitting new check function, please ensure update inst/check_table.csv metadata check. See contributing guidelines details.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/capture_check_cnd.html","id":null,"dir":"Reference","previous_headings":"","what":"Capture a condition of the result of validation check. — capture_check_cnd","title":"Capture a condition of the result of validation check. — capture_check_cnd","text":"Capture condition result validation check.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/capture_check_cnd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capture a condition of the result of validation check. — capture_check_cnd","text":"","code":"capture_check_cnd(   check,   file_path,   msg_subject,   msg_attribute,   msg_verbs = c(\"is\", \"must be\"),   error = FALSE,   details = NULL,   ... )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/capture_check_cnd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capture a condition of the result of validation check. — capture_check_cnd","text":"check logical, result validation check. check FALSE, validation failed. check TRUE, validation succeeded. file_path character string. Path file validated. Must relative path hub's model-output (equivalent) directory. msg_subject character string. subject validation. msg_attribute character string. attribute subject validated. msg_verbs character vector length 2. verbs describing state attribute relation validation subject. first element describes state validation succeeds, second element, validation fails. error logical. case validation failure, whether function return object class <error/check_error> (TRUE) <error/check_failure> (FALSE, default). details details appended output message. ... <dynamic> Named data fields stored inside condition object.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/capture_check_cnd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capture a condition of the result of validation check. — capture_check_cnd","text":"Depending whether validation succeeded value error argument, one : <message/check_success> condition class object. <error/check_failure> condition class object. <error/check_error> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/capture_check_cnd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Capture a condition of the result of validation check. — capture_check_cnd","text":"Arguments msg_subject, msg_attribute, msg_verbs details accept text can interpreted formatted cli::format_inline().","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/capture_check_cnd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Capture a condition of the result of validation check. — capture_check_cnd","text":"","code":"capture_check_cnd(   check = TRUE, file_path = \"test/file.csv\",   msg_subject = \"{.var round_id}\", msg_attribute = \"valid.\", error = FALSE ) #> <message/check_success> #> Message: #> `round_id` is valid. capture_check_cnd(   check = FALSE, file_path = \"test/file.csv\",   msg_subject = \"{.var round_id}\", msg_attribute = \"valid.\", error = FALSE,   details = \"Must be one of 'A' or 'B', not 'C'\" ) #> <error/check_failure> #> Error: #> ! `round_id` must be valid.  Must be one of 'A' or 'B', not 'C' capture_check_cnd(   check = FALSE, file_path = \"test/file.csv\",   msg_subject = \"{.var round_id}\", msg_attribute = \"valid.\", error = TRUE,   details = \"Must be one of {.val {c('A', 'B')}}, not {.val C}\" ) #> <error/check_error> #> Error: #> ! `round_id` must be valid.  Must be one of \"A\" and \"B\", not \"C\""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/capture_check_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Capture a simple info message condition — capture_check_info","title":"Capture a simple info message condition — capture_check_info","text":"Capture simple info message condition. Useful communicating check ignored skipped.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/capture_check_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capture a simple info message condition — capture_check_info","text":"","code":"capture_check_info(file_path, msg, call = rlang::caller_call())"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/capture_check_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capture a simple info message condition — capture_check_info","text":"file_path character string. Path file validated. Must relative path hub's model-output (equivalent) directory. msg Character string. Accepts text can interpreted formatted cli::format_inline(). call defused call function generated message. Use override default uses caller call. See rlang::stack details.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/capture_check_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capture a simple info message condition — capture_check_info","text":"<message/check_info> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/capture_exec_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Capture an execution error condition — capture_exec_error","title":"Capture an execution error condition — capture_exec_error","text":"Capture execution error condition. Useful communicating check execution failed. Usually used conjunction try.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/capture_exec_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capture an execution error condition — capture_exec_error","text":"","code":"capture_exec_error(file_path, msg, call = NULL)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/capture_exec_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capture an execution error condition — capture_exec_error","text":"file_path character string. Path file validated. Must relative path hub's model-output (equivalent) directory. msg Character string. call Character string. Name parent call failed execute. NULL (default), caller's call name captured.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/capture_exec_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capture an execution error condition — capture_exec_error","text":"<error/check_exec_error> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/capture_exec_warning.html","id":null,"dir":"Reference","previous_headings":"","what":"Capture an execution warning condition — capture_exec_warning","title":"Capture an execution warning condition — capture_exec_warning","text":"Capture execution warning condition. Useful communicating check execution failed. Usually used conjunction try.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/capture_exec_warning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capture an execution warning condition — capture_exec_warning","text":"","code":"capture_exec_warning(file_path, msg, call = NULL)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/capture_exec_warning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capture an execution warning condition — capture_exec_warning","text":"file_path character string. Path file validated. Must relative path hub's model-output (equivalent) directory. msg Character string. call Character string. Name parent call failed execute. NULL (default), caller's call name captured.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/capture_exec_warning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capture an execution warning condition — capture_exec_warning","text":"<warning/check_exec_warn> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_config_hub_valid.html","id":null,"dir":"Reference","previous_headings":"","what":"Check hub correctly configured — check_config_hub_valid","title":"Check hub correctly configured — check_config_hub_valid","text":"Checks admin tasks configuration files directory hub-config valid.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_config_hub_valid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check hub correctly configured — check_config_hub_valid","text":"","code":"check_config_hub_valid(hub_path)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_config_hub_valid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check hub correctly configured — check_config_hub_valid","text":"hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_config_hub_valid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check hub correctly configured — check_config_hub_valid","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_error> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check file exists at the file path specified — check_file_exists","title":"Check file exists at the file path specified — check_file_exists","text":"Check file exists file path specified","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check file exists at the file path specified — check_file_exists","text":"","code":"check_file_exists(   file_path,   hub_path = \".\",   subdir = c(\"model-output\", \"model-metadata\", \"hub-config\") )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check file exists at the file path specified — check_file_exists","text":"file_path character string. Path file validated relative hub's model-output directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. subdir subdirectory within hub","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check file exists at the file path specified — check_file_exists","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_error> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Check file format is accepted by hub. — check_file_format","title":"Check file format is accepted by hub. — check_file_format","text":"Check file format accepted hub.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check file format is accepted by hub. — check_file_format","text":"","code":"check_file_format(file_path, hub_path, round_id)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check file format is accepted by hub. — check_file_format","text":"file_path character string. Path file validated relative hub's model-output directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. round_id character string. round identifier.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check file format is accepted by hub. — check_file_format","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_error> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_location.html","id":null,"dir":"Reference","previous_headings":"","what":"Check file is being submitted to the correct folder — check_file_location","title":"Check file is being submitted to the correct folder — check_file_location","text":"Checks model_id metadata file name matches directory name file submitted .","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check file is being submitted to the correct folder — check_file_location","text":"","code":"check_file_location(file_path)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_location.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check file is being submitted to the correct folder — check_file_location","text":"file_path character string. Path file validated relative hub's model-output directory.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_location.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check file is being submitted to the correct folder — check_file_location","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_failure> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Check number of files submitted per round does not exceed the allowed number of submissions per team. — check_file_n","title":"Check number of files submitted per round does not exceed the allowed number of submissions per team. — check_file_n","text":"Check number files submitted per round exceed allowed number submissions per team.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check number of files submitted per round does not exceed the allowed number of submissions per team. — check_file_n","text":"","code":"check_file_n(file_path, hub_path, allowed_n = 1L)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check number of files submitted per round does not exceed the allowed number of submissions per team. — check_file_n","text":"file_path character string. Path file validated relative hub's model-output directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. allowed_n integer(1). maximum number files allowed per round.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check number of files submitted per round does not exceed the allowed number of submissions per team. — check_file_n","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_failure> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Check a model output file name can be correctly parsed. — check_file_name","title":"Check a model output file name can be correctly parsed. — check_file_name","text":"Check model output file name can correctly parsed.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check a model output file name can be correctly parsed. — check_file_name","text":"","code":"check_file_name(file_path)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check a model output file name can be correctly parsed. — check_file_name","text":"file_path character string. Path file validated relative hub's model-output directory.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check a model output file name can be correctly parsed. — check_file_name","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_error> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Check file can be read successfully — check_file_read","title":"Check file can be read successfully — check_file_read","text":"Check file can read successfully","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check file can be read successfully — check_file_read","text":"","code":"check_file_read(file_path, hub_path = \".\")"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check file can be read successfully — check_file_read","text":"file_path character string. Path file validated relative hub's model-output directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_file_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check file can be read successfully — check_file_read","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_error> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_for_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Raise conditions stored in a hub_validations S3 object — check_for_errors","title":"Raise conditions stored in a hub_validations S3 object — check_for_errors","text":"meant used CI workflows raise conditions hub_validations objects can also useful locally summarise results checks contained hub_validations S3 object.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_for_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raise conditions stored in a hub_validations S3 object — check_for_errors","text":"","code":"check_for_errors(x, verbose = FALSE)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_for_errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raise conditions stored in a hub_validations S3 object — check_for_errors","text":"x hub_validations object verbose Logical. TRUE, print results checks prior raising condition summarising hub_validations S3 object check results.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_for_errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raise conditions stored in a hub_validations S3 object — check_for_errors","text":"error one elements x class check_failure, check_error, check_exec_error check_exec_warning. TRUE invisibly otherwise.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_file_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether a metadata schema file exists — check_metadata_file_exists","title":"Check whether a metadata schema file exists — check_metadata_file_exists","text":"Check whether metadata schema file exists","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_file_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether a metadata schema file exists — check_metadata_file_exists","text":"","code":"check_metadata_file_exists(hub_path = \".\", file_path)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_file_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether a metadata schema file exists — check_metadata_file_exists","text":"hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. file_path character string. Path file validated relative hub's model-metadata directory.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_file_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether a metadata schema file exists — check_metadata_file_exists","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_error> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_file_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Check file is being submitted to the correct folder — check_metadata_file_ext","title":"Check file is being submitted to the correct folder — check_metadata_file_ext","text":"Checks model_id metadata file name matches directory name file submitted .","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_file_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check file is being submitted to the correct folder — check_metadata_file_ext","text":"","code":"check_metadata_file_ext(file_path)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_file_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check file is being submitted to the correct folder — check_metadata_file_ext","text":"file_path character string. Path file validated relative hub's model-output directory.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_file_ext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check file is being submitted to the correct folder — check_metadata_file_ext","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_failure> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_file_location.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that the metadata file is being submitted to the correct folder — check_metadata_file_location","title":"Check that the metadata file is being submitted to the correct folder — check_metadata_file_location","text":"Check metadata file submitted correct folder","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_file_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that the metadata file is being submitted to the correct folder — check_metadata_file_location","text":"","code":"check_metadata_file_location(file_path)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_file_location.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that the metadata file is being submitted to the correct folder — check_metadata_file_location","text":"file_path character string. Path file validated relative hub's model-metadata directory.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_file_location.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that the metadata file is being submitted to the correct folder — check_metadata_file_location","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_failure> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_file_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether the file name of a metadata file matches the model_id or combination of team_abbr and model_abbr specified within the metadata file — check_metadata_file_name","title":"Check whether the file name of a metadata file matches the model_id or combination of team_abbr and model_abbr specified within the metadata file — check_metadata_file_name","text":"Check whether file name metadata file matches model_id combination team_abbr model_abbr specified within metadata file","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_file_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether the file name of a metadata file matches the model_id or combination of team_abbr and model_abbr specified within the metadata file — check_metadata_file_name","text":"","code":"check_metadata_file_name(file_path, hub_path = \".\")"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_file_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether the file name of a metadata file matches the model_id or combination of team_abbr and model_abbr specified within the metadata file — check_metadata_file_name","text":"file_path character string. Path file validated relative hub's model-metadata directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_file_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether the file name of a metadata file matches the model_id or combination of team_abbr and model_abbr specified within the metadata file — check_metadata_file_name","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_failure> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_matches_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether a metadata file matches the schema provided by the hub — check_metadata_matches_schema","title":"Check whether a metadata file matches the schema provided by the hub — check_metadata_matches_schema","text":"Check whether metadata file matches schema provided hub","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_matches_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether a metadata file matches the schema provided by the hub — check_metadata_matches_schema","text":"","code":"check_metadata_matches_schema(file_path, hub_path = \".\")"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_matches_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether a metadata file matches the schema provided by the hub — check_metadata_matches_schema","text":"file_path character string. Path file validated relative hub's model-metadata directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_matches_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether a metadata file matches the schema provided by the hub — check_metadata_matches_schema","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_failure> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_schema_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether a metadata schema file exists — check_metadata_schema_exists","title":"Check whether a metadata schema file exists — check_metadata_schema_exists","text":"Check whether metadata schema file exists","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_schema_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether a metadata schema file exists — check_metadata_schema_exists","text":"","code":"check_metadata_schema_exists(hub_path = \".\")"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_schema_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether a metadata schema file exists — check_metadata_schema_exists","text":"hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_metadata_schema_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether a metadata schema file exists — check_metadata_schema_exists","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_failure> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_submission_metadata_file_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether a metadata file for the given model exists — check_submission_metadata_file_exists","title":"Check whether a metadata file for the given model exists — check_submission_metadata_file_exists","text":"Check whether metadata file given model exists","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_submission_metadata_file_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether a metadata file for the given model exists — check_submission_metadata_file_exists","text":"","code":"check_submission_metadata_file_exists(file_path, hub_path = \".\")"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_submission_metadata_file_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether a metadata file for the given model exists — check_submission_metadata_file_exists","text":"file_path character string. Path file validated relative hub's model-output directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_submission_metadata_file_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether a metadata file for the given model exists — check_submission_metadata_file_exists","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_error> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_submission_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks submission is within the valid submission window for a given round. — check_submission_time","title":"Checks submission is within the valid submission window for a given round. — check_submission_time","text":"Checks submission within valid submission window given round.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_submission_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks submission is within the valid submission window for a given round. — check_submission_time","text":"","code":"check_submission_time(   hub_path,   file_path,   ref_date_from = c(\"file\", \"file_path\") )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_submission_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks submission is within the valid submission window for a given round. — check_submission_time","text":"hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. file_path character string. Path file validated relative hub's model-output directory. ref_date_from whether get reference date around relative submission windows determined file's file_path round ID file contents . file requires file can read. applicable round configured determine submission windows relative value date column model output files. applicable explicit submission window start end dates provided hub's config.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_submission_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks submission is within the valid submission window for a given round. — check_submission_time","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_failure> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_col_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Check model data column data types — check_tbl_col_types","title":"Check model data column data types — check_tbl_col_types","text":"Check model output data column datatypes conform define hub config.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_col_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check model data column data types — check_tbl_col_types","text":"","code":"check_tbl_col_types(   tbl,   file_path,   hub_path,   output_type_id_datatype = c(\"from_config\", \"auto\", \"character\", \"double\", \"integer\",     \"logical\", \"Date\") )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_col_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check model data column data types — check_tbl_col_types","text":"tbl tibble/data.frame contents file validated. file_path character string. Path file validated relative hub's model-output directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. output_type_id_datatype character string. One \"from_config\", \"auto\", \"character\", \"double\", \"integer\", \"logical\", \"Date\". Defaults \"from_config\" uses setting output_type_id_datatype property tasks.json config file available. property set config, argument falls back \"auto\" determines  output_type_id data type automatically tasks.json config file simplest data type required represent output type ID values across output types hub. data type values can used override automatic determination. Note attempting coerce output_type_id data type valid data (e.g. trying coerce\"character\" values \"double\") likely result error potentially unexpected behaviour use care.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_col_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check model data column data types — check_tbl_col_types","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_failure> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_colnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Check column names of model output data — check_tbl_colnames","title":"Check column names of model output data — check_tbl_colnames","text":"Checks tibble/data.frame data read file validated contains expected task ID standard column names according round configuration validated .","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_colnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check column names of model output data — check_tbl_colnames","text":"","code":"check_tbl_colnames(tbl, round_id, file_path, hub_path = \".\")"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_colnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check column names of model output data — check_tbl_colnames","text":"tbl tibble/data.frame contents file validated. round_id character string. round identifier. file_path character string. Path file validated relative hub's model-output directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_colnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check column names of model output data — check_tbl_colnames","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_error> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_match_round_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Check model output data tbl round ID matches submission round ID. — check_tbl_match_round_id","title":"Check model output data tbl round ID matches submission round ID. — check_tbl_match_round_id","text":"Check model output data tbl round ID matches submission round ID.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_match_round_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check model output data tbl round ID matches submission round ID. — check_tbl_match_round_id","text":"","code":"check_tbl_match_round_id(tbl, file_path, hub_path, round_id_col = NULL)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_match_round_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check model output data tbl round ID matches submission round ID. — check_tbl_match_round_id","text":"tbl tibble/data.frame contents file validated. file_path character string. Path file validated relative hub's model-output directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. round_id_col Character string. name column containing round_ids. Usually, value round property round_id hub tasks.json config file. Defaults NULL determined config applicable.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_match_round_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check model output data tbl round ID matches submission round ID. — check_tbl_match_round_id","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_error> condition class object. round_id_from_variable: false round_id_col name provided, check skipped <message/check_info> condition class object returned. valid round_id_col name provided can extracted config (check check_valid_round_id_col), <message/check_error> condition class object returned rest check skipped.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_match_round_id.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check model output data tbl round ID matches submission round ID. — check_tbl_match_round_id","text":"check applies files submitted rounds round_id_from_variable: true round_id_col name explicitly provided. Skipped otherwise.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_rows_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"Check model data rows are all unique — check_tbl_rows_unique","title":"Check model data rows are all unique — check_tbl_rows_unique","text":"Checks combinations task ID, output type output type ID value combinations unique, checking duplicate rows across tbl columns excluding value column.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_rows_unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check model data rows are all unique — check_tbl_rows_unique","text":"","code":"check_tbl_rows_unique(tbl, file_path, hub_path)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_rows_unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check model data rows are all unique — check_tbl_rows_unique","text":"tbl tibble/data.frame contents file validated. Column types must character. file_path character string. Path file validated relative hub's model-output directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_rows_unique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check model data rows are all unique — check_tbl_rows_unique","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_failure> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_spl_compound_taskid_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Check model output data tbl sample compound task id sets for each modeling task match or are coarser than the expected set defined in the config. — check_tbl_spl_compound_taskid_set","title":"Check model output data tbl sample compound task id sets for each modeling task match or are coarser than the expected set defined in the config. — check_tbl_spl_compound_taskid_set","text":"check detects compound task ID sets samples, implied output_type_id task ID values, checks internal consistency compliacance compound_taskid_set defined round modeling task tasks.json config.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_spl_compound_taskid_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check model output data tbl sample compound task id sets for each modeling task match or are coarser than the expected set defined in the config. — check_tbl_spl_compound_taskid_set","text":"","code":"check_tbl_spl_compound_taskid_set(   tbl,   round_id,   file_path,   hub_path,   derived_task_ids = NULL )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_spl_compound_taskid_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check model output data tbl sample compound task id sets for each modeling task match or are coarser than the expected set defined in the config. — check_tbl_spl_compound_taskid_set","text":"tbl tibble/data.frame contents file validated. Column types must character. round_id character string. round identifier. file_path character string. Path file validated relative hub's model-output directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. derived_task_ids Character vector derived task ID names (task IDs whose values depend task IDs) ignore. Columns task ids contain NAs.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_spl_compound_taskid_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check model output data tbl sample compound task id sets for each modeling task match or are coarser than the expected set defined in the config. — check_tbl_spl_compound_taskid_set","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_error> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_spl_compound_taskid_set.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check model output data tbl sample compound task id sets for each modeling task match or are coarser than the expected set defined in the config. — check_tbl_spl_compound_taskid_set","text":"check fails, output check includes errors element, list items, one modeling task failing validation. structure depends reason check failed. check failed single unique compound_taskid_set found given model task, errors object list one element compound_taskid_set detected following structure: tbl_comp_tids: compound task id set detected tbl. output_type_ids: output type ID sample contain single, unique value compound task ID. check failed task IDs allowed config, identified compound task ID (.e. samples describe \"finer\" compound modeling tasks) given model task, errors object list structure described well additional following elements: config_comp_tids: allowed compound_taskid_set defined modeling task config. invalid_tbl_comp_tids: names invalid compound task IDs. name element index identifying config modeling task sample associated mt_id. See hubverse documentation samples details.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_spl_compound_tid.html","id":null,"dir":"Reference","previous_headings":"","what":"Check model output data tbl samples contain single unique values for each compound task ID within individual samples — check_tbl_spl_compound_tid","title":"Check model output data tbl samples contain single unique values for each compound task ID within individual samples — check_tbl_spl_compound_tid","text":"Check model output data tbl samples contain single unique values compound task ID within individual samples","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_spl_compound_tid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check model output data tbl samples contain single unique values for each compound task ID within individual samples — check_tbl_spl_compound_tid","text":"","code":"check_tbl_spl_compound_tid(   tbl,   round_id,   file_path,   hub_path,   compound_taskid_set = NULL,   derived_task_ids = NULL )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_spl_compound_tid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check model output data tbl samples contain single unique values for each compound task ID within individual samples — check_tbl_spl_compound_tid","text":"tbl tibble/data.frame contents file validated. Column types must character. round_id character string. round identifier. file_path character string. Path file validated relative hub's model-output directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. compound_taskid_set list compound_taskid_sets (characters vector compound task IDs), one modeling task. Used override compound task ID set config file, example, validating coarser samples. derived_task_ids Character vector derived task ID names (task IDs whose values depend task IDs) ignore. Columns task ids contain NAs.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_spl_compound_tid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check model output data tbl samples contain single unique values for each compound task ID within individual samples — check_tbl_spl_compound_tid","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_error> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_spl_compound_tid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check model output data tbl samples contain single unique values for each compound task ID within individual samples — check_tbl_spl_compound_tid","text":"Output check includes errors element, list items, one sample failing validation, following structure: mt_id: Index identifying config modeling task sample associated . output_type_id: output type ID sample contain single, unique value compound task ID. values: unique values compound task ID. See hubverse documentation samples details.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_spl_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Check model output data tbl samples contain the appropriate number of samples for a given compound idx. — check_tbl_spl_n","title":"Check model output data tbl samples contain the appropriate number of samples for a given compound idx. — check_tbl_spl_n","text":"Check model output data tbl samples contain appropriate number samples given compound idx.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_spl_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check model output data tbl samples contain the appropriate number of samples for a given compound idx. — check_tbl_spl_n","text":"","code":"check_tbl_spl_n(   tbl,   round_id,   file_path,   hub_path,   compound_taskid_set = NULL,   derived_task_ids = NULL )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_spl_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check model output data tbl samples contain the appropriate number of samples for a given compound idx. — check_tbl_spl_n","text":"tbl tibble/data.frame contents file validated. Column types must character. round_id character string. round identifier. file_path character string. Path file validated relative hub's model-output directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. compound_taskid_set list compound_taskid_sets (characters vector compound task IDs), one modeling task. Used override compound task ID set config file, example, validating coarser samples. derived_task_ids Character vector derived task ID names (task IDs whose values depend task IDs) ignore. Columns task ids contain NAs.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_spl_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check model output data tbl samples contain the appropriate number of samples for a given compound idx. — check_tbl_spl_n","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_failure> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_spl_n.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check model output data tbl samples contain the appropriate number of samples for a given compound idx. — check_tbl_spl_n","text":"Output check includes errors element, list items, one compound_idx failing validation, following structure: compound_idx: compound idx failed validation number samples. n: number samples counted compound idx. min_samples_per_task: minimum number samples required compound idx. max_samples_per_task: maximum number samples required compound idx. compound_idx_tbl: tibble expected structure samples belonging compound idx. See hubverse documentation samples details.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_spl_non_compound_tid.html","id":null,"dir":"Reference","previous_headings":"","what":"Check model output data tbl samples contain single unique combination of non-compound task ID values across all samples — check_tbl_spl_non_compound_tid","title":"Check model output data tbl samples contain single unique combination of non-compound task ID values across all samples — check_tbl_spl_non_compound_tid","text":"Check model output data tbl samples contain single unique combination non-compound task ID values across samples","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_spl_non_compound_tid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check model output data tbl samples contain single unique combination of non-compound task ID values across all samples — check_tbl_spl_non_compound_tid","text":"","code":"check_tbl_spl_non_compound_tid(   tbl,   round_id,   file_path,   hub_path,   compound_taskid_set = NULL,   derived_task_ids = NULL )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_spl_non_compound_tid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check model output data tbl samples contain single unique combination of non-compound task ID values across all samples — check_tbl_spl_non_compound_tid","text":"tbl tibble/data.frame contents file validated. Column types must character. round_id character string. round identifier. file_path character string. Path file validated relative hub's model-output directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. compound_taskid_set list compound_taskid_sets (characters vector compound task IDs), one modeling task. Used override compound task ID set config file, example, validating coarser samples. derived_task_ids Character vector derived task ID names (task IDs whose values depend task IDs) ignore. Columns task ids contain NAs.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_spl_non_compound_tid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check model output data tbl samples contain single unique combination of non-compound task ID values across all samples — check_tbl_spl_non_compound_tid","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_error> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_spl_non_compound_tid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check model output data tbl samples contain single unique combination of non-compound task ID values across all samples — check_tbl_spl_non_compound_tid","text":"Output check includes errors element, list items, one modeling task containing samples failing validation, following structure: mt_id: Index identifying config modeling task samples associated . output_type_ids: output type IDs samples match frequent non-compound task ID value combination across samples modeling task. frequent: frequent non-compound task ID value combination across samples modeling task samples compared. See hubverse documentation samples details.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_unique_round_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Check model output data tbl contains a single unique round ID. — check_tbl_unique_round_id","title":"Check model output data tbl contains a single unique round ID. — check_tbl_unique_round_id","text":"Check model output data tbl contains single unique round ID.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_unique_round_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check model output data tbl contains a single unique round ID. — check_tbl_unique_round_id","text":"","code":"check_tbl_unique_round_id(tbl, file_path, hub_path, round_id_col = NULL)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_unique_round_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check model output data tbl contains a single unique round ID. — check_tbl_unique_round_id","text":"tbl tibble/data.frame contents file validated. file_path character string. Path file validated relative hub's model-output directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. round_id_col Character string. name column containing round_ids. Usually, value round property round_id hub tasks.json config file. Defaults NULL determined config applicable.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_unique_round_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check model output data tbl contains a single unique round ID. — check_tbl_unique_round_id","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_error> condition class object. round_id_from_variable: false round_id_col name provided, check skipped <message/check_info> condition class object returned. valid round_id_col name provided can extracted config (check check_valid_round_id_col), <message/check_error> condition class object returned rest check skipped.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_unique_round_id.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check model output data tbl contains a single unique round ID. — check_tbl_unique_round_id","text":"check applies files submitted rounds round_id_from_variable: true round_id_col name explicitly provided. Skipped otherwise.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_value_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Check output type values of model output data against config — check_tbl_value_col","title":"Check output type values of model output data against config — check_tbl_value_col","text":"Checks values value column tibble/data.frame data read file validated conform configuration output type appropriate model task.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_value_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check output type values of model output data against config — check_tbl_value_col","text":"","code":"check_tbl_value_col(   tbl,   round_id,   file_path,   hub_path,   derived_task_ids = NULL )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_value_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check output type values of model output data against config — check_tbl_value_col","text":"tbl tibble/data.frame contents file validated. round_id character string. round identifier. file_path character string. Path file validated relative hub's model-output directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. derived_task_ids Character vector derived task ID names (task IDs whose values depend task IDs) ignore. Columns task ids contain NAs.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_value_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check output type values of model output data against config — check_tbl_value_col","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_failure> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_value_col_ascending.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that quantile and cdf output type values of model output data are non-descending — check_tbl_value_col_ascending","title":"Check that quantile and cdf output type values of model output data are non-descending — check_tbl_value_col_ascending","text":"Checks values value column quantile cdf output type data unique task ID/output type combination non-descending arranged increasing output_type_id order. Check performed tbl contains quantile cdf output type data. , check skipped <message/check_info> condition class object returned.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_value_col_ascending.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that quantile and cdf output type values of model output data are non-descending — check_tbl_value_col_ascending","text":"","code":"check_tbl_value_col_ascending(tbl, file_path)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_value_col_ascending.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that quantile and cdf output type values of model output data are non-descending — check_tbl_value_col_ascending","text":"tbl tibble/data.frame contents file validated. file_path character string. Path file validated relative hub's model-output directory.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_value_col_ascending.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that quantile and cdf output type values of model output data are non-descending — check_tbl_value_col_ascending","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_failure> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_value_col_sum1.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that pmf output type values of model output data sum to 1. — check_tbl_value_col_sum1","title":"Check that pmf output type values of model output data sum to 1. — check_tbl_value_col_sum1","text":"Checks values value column pmf output type data unique task ID combination sum 1. Check performed tbl contains pmf output type data. , check skipped <message/check_info> condition class object returned.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_value_col_sum1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that pmf output type values of model output data sum to 1. — check_tbl_value_col_sum1","text":"","code":"check_tbl_value_col_sum1(tbl, file_path)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_value_col_sum1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that pmf output type values of model output data sum to 1. — check_tbl_value_col_sum1","text":"tbl tibble/data.frame contents file validated. file_path character string. Path file validated relative hub's model-output directory.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_value_col_sum1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that pmf output type values of model output data sum to 1. — check_tbl_value_col_sum1","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_failure> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Check model output data tbl contains valid value combinations — check_tbl_values","title":"Check model output data tbl contains valid value combinations — check_tbl_values","text":"Check model output data tbl contains valid value combinations","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check model output data tbl contains valid value combinations — check_tbl_values","text":"","code":"check_tbl_values(tbl, round_id, file_path, hub_path, derived_task_ids = NULL)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check model output data tbl contains valid value combinations — check_tbl_values","text":"tbl tibble/data.frame contents file validated. Column types must character. round_id character string. round identifier. file_path character string. Path file validated relative hub's model-output directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. derived_task_ids Character vector derived task ID names (task IDs whose values depend task IDs) ignore. Columns task ids contain NAs.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check model output data tbl contains valid value combinations — check_tbl_values","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_error> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_values_required.html","id":null,"dir":"Reference","previous_headings":"","what":"Check all required task ID/output type/output type ID value combinations present in model data. — check_tbl_values_required","title":"Check all required task ID/output type/output type ID value combinations present in model data. — check_tbl_values_required","text":"Check required task ID/output type/output type ID value combinations present model data.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_values_required.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check all required task ID/output type/output type ID value combinations present in model data. — check_tbl_values_required","text":"","code":"check_tbl_values_required(   tbl,   round_id,   file_path,   hub_path,   derived_task_ids = NULL )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_values_required.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check all required task ID/output type/output type ID value combinations present in model data. — check_tbl_values_required","text":"tbl tibble/data.frame contents file validated. Column types must character. round_id character string. round identifier. file_path character string. Path file validated relative hub's model-output directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. derived_task_ids Character vector derived task ID names (task IDs whose values depend task IDs) ignore. Columns task ids contain NAs.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_tbl_values_required.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check all required task ID/output type/output type ID value combinations present in model data. — check_tbl_values_required","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_failure> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_valid_round_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether the round_id determined for the submission is valid — check_valid_round_id","title":"Check whether the round_id determined for the submission is valid — check_valid_round_id","text":"Check whether round_id determined submission valid","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_valid_round_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether the round_id determined for the submission is valid — check_valid_round_id","text":"","code":"check_valid_round_id(round_id, file_path, hub_path = \".\")"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_valid_round_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether the round_id determined for the submission is valid — check_valid_round_id","text":"round_id character string. round identifier. file_path character string. Path file validated relative hub's model-output directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_valid_round_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether the round_id determined for the submission is valid — check_valid_round_id","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_error> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_valid_round_id_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that any round_id_col name provided or extracted from the hub config is valid. — check_valid_round_id_col","title":"Check that any round_id_col name provided or extracted from the hub config is valid. — check_valid_round_id_col","text":"Check round_id_col name provided extracted hub config valid.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_valid_round_id_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that any round_id_col name provided or extracted from the hub config is valid. — check_valid_round_id_col","text":"","code":"check_valid_round_id_col(tbl, file_path, hub_path, round_id_col = NULL)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_valid_round_id_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that any round_id_col name provided or extracted from the hub config is valid. — check_valid_round_id_col","text":"tbl tibble/data.frame contents file validated. file_path character string. Path file validated relative hub's model-output directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. round_id_col Character string. name column containing round_ids. Usually, value round property round_id hub tasks.json config file. Defaults NULL determined config applicable.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_valid_round_id_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that any round_id_col name provided or extracted from the hub config is valid. — check_valid_round_id_col","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_failure> condition class object. round_id_from_variable: false round_id_col name provided, check skipped <message/check_info> condition class object returned. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/check_valid_round_id_col.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check that any round_id_col name provided or extracted from the hub config is valid. — check_valid_round_id_col","text":"check applies files submitted rounds round_id_from_variable: true round_id_col name explicitly provided. Skipped otherwise.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate hub_validations S3 class objects — combine","title":"Concatenate hub_validations S3 class objects — combine","text":"Concatenate hub_validations S3 class objects","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate hub_validations S3 class objects — combine","text":"","code":"combine(...)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate hub_validations S3 class objects — combine","text":"... hub_validations S3 class objects concatenated.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate hub_validations S3 class objects — combine","text":"hub_validations S3 class object.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/create_custom_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a custom validation check function template file. — create_custom_check","title":"Create a custom validation check function template file. — create_custom_check","text":"Create custom validation check function template file.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/create_custom_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a custom validation check function template file. — create_custom_check","text":"","code":"create_custom_check(   name,   hub_path = \".\",   r_dir = \"src/validations/R\",   error = FALSE,   conditional = FALSE,   error_object = FALSE,   config = FALSE,   extra_args = FALSE,   overwrite = FALSE )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/create_custom_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a custom validation check function template file. — create_custom_check","text":"name Character string. Name custom check function. recommend following hubValidations package naming convention. details, consult article writing custom check functions. hub_path Character string. Path hub directory. Default current working directory. r_dir Character string. Path (relative hub_path) directory custom check function file written . Default src/validations/R recommended directory storing custom check functions. error Logical. Defaults FALSE, return <error/check_failure> class object case failed check. Set TRUE custom check function required pass custom checks performed; case failed check, custom check function return <error/check_error> class object cause custom validations return early. Note case custom validations, executions errors custom functions also result custom validations returning early. conditional Logical. TRUE, custom check function template include block code check condition running check. useful check may need skipped based condition. error_object Logical. TRUE, custom check function template include error object can used store additional information properties object checked caused check failure. example, store index rows tbl caused check failure. config Logical. TRUE, custom check function template include hub_path function argument block code reading hub tasks.json config file. extra_args Logical. TRUE, custom check function template include extra_arg template function argument template block code check input arguments custom check function. overwrite Logical. TRUE, function overwrite existing","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/create_custom_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a custom validation check function template file. — create_custom_check","text":"Invisible TRUE custom check function file created successfully.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/create_custom_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a custom validation check function template file. — create_custom_check","text":"See article writing custom check functions .","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/create_custom_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a custom validation check function template file. — create_custom_check","text":"","code":"withr::with_tempdir({   # Create the custom check file with default settings.   create_custom_check(\"check_default\")   cat(readLines(\"src/validations/R/check_default.R\"), sep = \"\\n\")    # Create fully featured custom check file.   create_custom_check(\"check_full\",     error = TRUE, conditional = TRUE,     error_object = TRUE, config = TRUE,     extra_args = TRUE   )   cat(readLines(\"src/validations/R/check_full.R\"), sep = \"\\n\") }) #> ✔ Directory src/validations/R created. #> ✔ Custom validation check template function file \"check_default.R\" created. #> → Edit the function template to add your custom check logic. #> ℹ See the Writing custom check functions article for more information. #> (<https://hubverse-org.github.io/hubValidations/articles/writing-custom-fns.html>) #> check_default <- function(tbl, file_path) { #>   # Here you can write your custom check logic #>   # Assign the result as `TRUE` or `FALSE` to object called `check`. #>   # If `check` is `TRUE`, the check will pass. #>  #>   check <- condition_to_be_TRUE_for_check_to_pass #>  #>   if (check) { #>     details <- NULL #>   } else { #>     # You can use details messages to pass on helpful information to users about #>     # what caused the validation failure and how to locate affected data. #>     details <- cli::format_inline(\"{.var round_id} value {.val invalid} is invalid.\") #>   } #>  #>   hubValidations::capture_check_cnd( #>     check = check, #>     file_path = file_path, #>     msg_subject = \"{.var round_id}\", #>     msg_attribute = \"valid.\", #>     error = FALSE, #>     details = details #>   ) #> } #> ✔ Custom validation check template function file \"check_full.R\" created. #> → Edit the function template to add your custom check logic. #> ℹ See the Writing custom check functions article for more information. #> (<https://hubverse-org.github.io/hubValidations/articles/writing-custom-fns.html>) #> check_full <- function(tbl, file_path, hub_path, extra_arg = NULL) { #>   # If you're providing additional custom arguments, make sure to include input checks #>   # at the top of your function. `checkmate` package provides a simple interface #>   # for many useful basic checks and is available through hubValidations. #>   # The following example checks that `extra_arg` is a single character string. #>   checkmate::assert_character(extra_arg, len = 1L, null.ok) #>  #>   config_tasks <- hubUtils::read_config(hub_path) #>  #>   if (!condition) { #>     return( #>       capture_check_info( #>         file_path, #>         \"Condition for running this check was not met. Skipped.\" #>       ) #>     ) #>   } #>  #>   # Here you can write your custom check logic #>   # Assign the result as `TRUE` or `FALSE` to object called `check`. #>   # If `check` is `TRUE`, the check will pass. #>  #>   check <- condition_to_be_TRUE_for_check_to_pass #>  #>   if (check) { #>     details <- NULL #>     error_object <- NULL #>   } else { #>     # You can use details messages and any type of R object to pass on helpful #>     # information to users about what caused the validation failure and how to #>     # locate affected data. #>     error_object <- list( #>       invalid_rows = which(tbl$example_task_id == \"invalid\") #>     ) #>     details <- cli::format_inline(\"See {.var error_object} attribute for details.\") #>   } #>  #>   hubValidations::capture_check_cnd( #>     check = check, #>     file_path = file_path, #>     msg_subject = \"{.var round_id}\", #>     msg_attribute = \"valid.\", #>     error = TRUE, #>     error_object = error_object, #>     details = details #>   ) #> }"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/expand_model_out_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create expanded grid of valid task ID and output type value combinations — expand_model_out_grid","title":"Create expanded grid of valid task ID and output type value combinations — expand_model_out_grid","text":"Create expanded grid valid task ID output type value combinations","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/expand_model_out_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create expanded grid of valid task ID and output type value combinations — expand_model_out_grid","text":"","code":"expand_model_out_grid(   config_tasks,   round_id,   required_vals_only = FALSE,   all_character = FALSE,   output_type_id_datatype = c(\"from_config\", \"auto\", \"character\", \"double\", \"integer\",     \"logical\", \"Date\"),   as_arrow_table = FALSE,   bind_model_tasks = TRUE,   include_sample_ids = FALSE,   compound_taskid_set = NULL,   output_types = NULL,   derived_task_ids = NULL )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/expand_model_out_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create expanded grid of valid task ID and output type value combinations — expand_model_out_grid","text":"config_tasks list version content's hub's tasks.json config file, accessed \"config_tasks\" attribute <hub_connection> object function hubUtils::read_config(). round_id Character string. Round identifier. round set round_id_from_variable: true, IDs values task ID defined round's round_id property config_tasks. Otherwise match round's round_id value config. Ignored hub contains single round. required_vals_only Logical. Whether return combinations Task ID related output type ID required values. all_character Logical. Whether return character column. output_type_id_datatype character string. One \"from_config\", \"auto\", \"character\", \"double\", \"integer\", \"logical\", \"Date\". Defaults \"from_config\" uses setting output_type_id_datatype property tasks.json config file available. property set config, argument falls back \"auto\" determines  output_type_id data type automatically tasks.json config file simplest data type required represent output type ID values across output types hub. data type values can used override automatic determination. Note attempting coerce output_type_id data type valid data (e.g. trying coerce\"character\" values \"double\") likely result error potentially unexpected behaviour use care. as_arrow_table Logical. Whether return arrow table. Defaults FALSE. bind_model_tasks Logical. Whether bind expanded grids values multiple modeling tasks single tibble/arrow table return list. include_sample_ids Logical. Whether include sample identifiers output_type_id column. compound_taskid_set List character vectors, one modeling task round. Can used override compound task ID set defined config. NULL provided given modeling task, compound task ID set task IDs used. output_types Character vector output type names include. Use subset grids specific output types. derived_task_ids Character vector derived task ID names (task IDs whose values depend task IDs) ignore. Columns task ids contain NAs.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/expand_model_out_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create expanded grid of valid task ID and output type value combinations — expand_model_out_grid","text":"bind_model_tasks = TRUE (default) tibble arrow table containing possible task ID related output type ID value combinations. bind_model_tasks = FALSE, list containing tibble arrow table round modeling task. Columns coerced data types according hub schema, unless all_character = TRUE. all_character = TRUE, columns returned character can faster large expanded grids expected. required_vals_only = TRUE, values limited combinations required values . Note required_vals_only = TRUE optional output type requested output_types, zero row grid returned. output types requested however (.e. output_types = NULL) optional, grid required task ID values returned.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/expand_model_out_grid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create expanded grid of valid task ID and output type value combinations — expand_model_out_grid","text":"round set round_id_from_variable: true, value task ID round IDs derived (.e. task ID specified round_id property config_tasks) set value round_id argument returned output. sample output types included output include_sample_ids = TRUE, output_type_id column contains example sample indexes useful identifying compound task ID structure multivariate sampling distributions particular, .e. combinations task ID values represent individual samples.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/expand_model_out_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create expanded grid of valid task ID and output type value combinations — expand_model_out_grid","text":"","code":"hub_con <- hubData::connect_hub(   system.file(\"testhubs/flusight\", package = \"hubUtils\") ) config_tasks <- attr(hub_con, \"config_tasks\") expand_model_out_grid(config_tasks, round_id = \"2023-01-02\") #> # A tibble: 3,132 × 6 #>    forecast_date target              horizon location output_type output_type_id #>    <date>        <chr>                 <int> <chr>    <chr>       <chr>          #>  1 2023-01-02    wk flu hosp rate c…       2 US       pmf         large_decrease #>  2 2023-01-02    wk flu hosp rate c…       1 US       pmf         large_decrease #>  3 2023-01-02    wk flu hosp rate c…       2 01       pmf         large_decrease #>  4 2023-01-02    wk flu hosp rate c…       1 01       pmf         large_decrease #>  5 2023-01-02    wk flu hosp rate c…       2 02       pmf         large_decrease #>  6 2023-01-02    wk flu hosp rate c…       1 02       pmf         large_decrease #>  7 2023-01-02    wk flu hosp rate c…       2 04       pmf         large_decrease #>  8 2023-01-02    wk flu hosp rate c…       1 04       pmf         large_decrease #>  9 2023-01-02    wk flu hosp rate c…       2 05       pmf         large_decrease #> 10 2023-01-02    wk flu hosp rate c…       1 05       pmf         large_decrease #> # ℹ 3,122 more rows expand_model_out_grid(   config_tasks,   round_id = \"2023-01-02\",   required_vals_only = TRUE ) #> # A tibble: 28 × 5 #>    forecast_date horizon location output_type output_type_id #>    <date>          <int> <chr>    <chr>       <chr>          #>  1 2023-01-02          2 US       pmf         large_decrease #>  2 2023-01-02          2 US       pmf         decrease       #>  3 2023-01-02          2 US       pmf         stable         #>  4 2023-01-02          2 US       pmf         increase       #>  5 2023-01-02          2 US       pmf         large_increase #>  6 2023-01-02          2 US       quantile    0.01           #>  7 2023-01-02          2 US       quantile    0.025          #>  8 2023-01-02          2 US       quantile    0.05           #>  9 2023-01-02          2 US       quantile    0.1            #> 10 2023-01-02          2 US       quantile    0.15           #> # ℹ 18 more rows # Specifying a round in a hub with multiple round configurations. hub_con <- hubData::connect_hub(   system.file(\"testhubs/simple\", package = \"hubUtils\") ) config_tasks <- attr(hub_con, \"config_tasks\") expand_model_out_grid(config_tasks, round_id = \"2022-10-01\") #> # A tibble: 5,184 × 6 #>    origin_date target          horizon location output_type output_type_id #>    <date>      <chr>             <int> <chr>    <chr>                <dbl> #>  1 2022-10-01  wk inc flu hosp       1 US       mean                    NA #>  2 2022-10-01  wk inc flu hosp       2 US       mean                    NA #>  3 2022-10-01  wk inc flu hosp       3 US       mean                    NA #>  4 2022-10-01  wk inc flu hosp       4 US       mean                    NA #>  5 2022-10-01  wk inc flu hosp       1 01       mean                    NA #>  6 2022-10-01  wk inc flu hosp       2 01       mean                    NA #>  7 2022-10-01  wk inc flu hosp       3 01       mean                    NA #>  8 2022-10-01  wk inc flu hosp       4 01       mean                    NA #>  9 2022-10-01  wk inc flu hosp       1 02       mean                    NA #> 10 2022-10-01  wk inc flu hosp       2 02       mean                    NA #> # ℹ 5,174 more rows # Later round_id maps to round config that includes additional task ID 'age_group'. expand_model_out_grid(config_tasks, round_id = \"2022-10-29\") #> # A tibble: 25,920 × 7 #>    origin_date target      horizon location age_group output_type output_type_id #>    <date>      <chr>         <int> <chr>    <chr>     <chr>                <dbl> #>  1 2022-10-29  wk inc flu…       1 US       65+       mean                    NA #>  2 2022-10-29  wk inc flu…       2 US       65+       mean                    NA #>  3 2022-10-29  wk inc flu…       3 US       65+       mean                    NA #>  4 2022-10-29  wk inc flu…       4 US       65+       mean                    NA #>  5 2022-10-29  wk inc flu…       1 01       65+       mean                    NA #>  6 2022-10-29  wk inc flu…       2 01       65+       mean                    NA #>  7 2022-10-29  wk inc flu…       3 01       65+       mean                    NA #>  8 2022-10-29  wk inc flu…       4 01       65+       mean                    NA #>  9 2022-10-29  wk inc flu…       1 02       65+       mean                    NA #> 10 2022-10-29  wk inc flu…       2 02       65+       mean                    NA #> # ℹ 25,910 more rows # Coerce all columns to character expand_model_out_grid(config_tasks,   round_id = \"2022-10-29\",   all_character = TRUE ) #> # A tibble: 25,920 × 7 #>    origin_date target      horizon location age_group output_type output_type_id #>    <chr>       <chr>       <chr>   <chr>    <chr>     <chr>       <chr>          #>  1 2022-10-29  wk inc flu… 1       US       65+       mean        NA             #>  2 2022-10-29  wk inc flu… 2       US       65+       mean        NA             #>  3 2022-10-29  wk inc flu… 3       US       65+       mean        NA             #>  4 2022-10-29  wk inc flu… 4       US       65+       mean        NA             #>  5 2022-10-29  wk inc flu… 1       01       65+       mean        NA             #>  6 2022-10-29  wk inc flu… 2       01       65+       mean        NA             #>  7 2022-10-29  wk inc flu… 3       01       65+       mean        NA             #>  8 2022-10-29  wk inc flu… 4       01       65+       mean        NA             #>  9 2022-10-29  wk inc flu… 1       02       65+       mean        NA             #> 10 2022-10-29  wk inc flu… 2       02       65+       mean        NA             #> # ℹ 25,910 more rows # Return arrow table expand_model_out_grid(config_tasks,   round_id = \"2022-10-29\",   all_character = TRUE,   as_arrow_table = TRUE ) #> Table #> 25920 rows x 7 columns #> $origin_date <string> #> $target <string> #> $horizon <string> #> $location <string> #> $age_group <string> #> $output_type <string> #> $output_type_id <string> # Hub with sample output type config_tasks <- hubUtils::read_config_file(system.file(\"config\", \"tasks.json\",   package = \"hubValidations\" )) expand_model_out_grid(config_tasks,   round_id = \"2022-12-26\" ) #> # A tibble: 42 × 6 #>    forecast_date target              horizon location output_type output_type_id #>    <date>        <chr>                 <int> <chr>    <chr>       <chr>          #>  1 2022-12-26    wk ahead inc flu h…       2 US       sample      NA             #>  2 2022-12-26    wk ahead inc flu h…       1 US       sample      NA             #>  3 2022-12-26    wk ahead inc flu h…       2 01       sample      NA             #>  4 2022-12-26    wk ahead inc flu h…       1 01       sample      NA             #>  5 2022-12-26    wk ahead inc flu h…       2 02       sample      NA             #>  6 2022-12-26    wk ahead inc flu h…       1 02       sample      NA             #>  7 2022-12-26    wk ahead inc flu h…       2 US       mean        NA             #>  8 2022-12-26    wk ahead inc flu h…       1 US       mean        NA             #>  9 2022-12-26    wk ahead inc flu h…       2 01       mean        NA             #> 10 2022-12-26    wk ahead inc flu h…       1 01       mean        NA             #> # ℹ 32 more rows # Include sample IDS expand_model_out_grid(config_tasks,   round_id = \"2022-12-26\",   include_sample_ids = TRUE ) #> # A tibble: 42 × 6 #>    forecast_date target              horizon location output_type output_type_id #>    <date>        <chr>                 <int> <chr>    <chr>       <chr>          #>  1 2022-12-26    wk ahead inc flu h…       2 US       mean        NA             #>  2 2022-12-26    wk ahead inc flu h…       1 US       mean        NA             #>  3 2022-12-26    wk ahead inc flu h…       2 01       mean        NA             #>  4 2022-12-26    wk ahead inc flu h…       1 01       mean        NA             #>  5 2022-12-26    wk ahead inc flu h…       2 02       mean        NA             #>  6 2022-12-26    wk ahead inc flu h…       1 02       mean        NA             #>  7 2022-12-26    wk ahead inc flu h…       2 US       sample      s1             #>  8 2022-12-26    wk ahead inc flu h…       1 US       sample      s2             #>  9 2022-12-26    wk ahead inc flu h…       2 01       sample      s3             #> 10 2022-12-26    wk ahead inc flu h…       1 01       sample      s4             #> # ℹ 32 more rows # Hub with sample output type and compound task ID structure config_tasks <- hubUtils::read_config_file(   system.file(\"config\", \"tasks-comp-tid.json\", package = \"hubValidations\") ) expand_model_out_grid(config_tasks,   round_id = \"2022-12-26\",   include_sample_ids = TRUE ) #> # A tibble: 42 × 6 #>    forecast_date target              horizon location output_type output_type_id #>    <date>        <chr>                 <int> <chr>    <chr>       <chr>          #>  1 2022-12-26    wk ahead inc flu h…       2 US       mean        NA             #>  2 2022-12-26    wk ahead inc flu h…       1 US       mean        NA             #>  3 2022-12-26    wk ahead inc flu h…       2 01       mean        NA             #>  4 2022-12-26    wk ahead inc flu h…       1 01       mean        NA             #>  5 2022-12-26    wk ahead inc flu h…       2 02       mean        NA             #>  6 2022-12-26    wk ahead inc flu h…       1 02       mean        NA             #>  7 2022-12-26    wk ahead inc flu h…       2 US       sample      1              #>  8 2022-12-26    wk ahead inc flu h…       2 01       sample      1              #>  9 2022-12-26    wk ahead inc flu h…       2 02       sample      1              #> 10 2022-12-26    wk ahead inc flu h…       1 US       sample      2              #> # ℹ 32 more rows # Override config compound task ID set # Create coarser compound task ID set for the first modeling task which contains # samples expand_model_out_grid(config_tasks,   round_id = \"2022-12-26\",   include_sample_ids = TRUE,   compound_taskid_set = list(     c(\"forecast_date\", \"target\"),     NULL   ) ) #> # A tibble: 42 × 6 #>    forecast_date target              horizon location output_type output_type_id #>    <date>        <chr>                 <int> <chr>    <chr>       <chr>          #>  1 2022-12-26    wk ahead inc flu h…       2 US       mean        NA             #>  2 2022-12-26    wk ahead inc flu h…       1 US       mean        NA             #>  3 2022-12-26    wk ahead inc flu h…       2 01       mean        NA             #>  4 2022-12-26    wk ahead inc flu h…       1 01       mean        NA             #>  5 2022-12-26    wk ahead inc flu h…       2 02       mean        NA             #>  6 2022-12-26    wk ahead inc flu h…       1 02       mean        NA             #>  7 2022-12-26    wk ahead inc flu h…       2 US       sample      1              #>  8 2022-12-26    wk ahead inc flu h…       1 US       sample      1              #>  9 2022-12-26    wk ahead inc flu h…       2 01       sample      1              #> 10 2022-12-26    wk ahead inc flu h…       1 01       sample      1              #> # ℹ 32 more rows expand_model_out_grid(config_tasks,   round_id = \"2022-12-26\",   include_sample_ids = TRUE,   compound_taskid_set = list(     NULL,     NULL   ) ) #> # A tibble: 42 × 6 #>    forecast_date target              horizon location output_type output_type_id #>    <date>        <chr>                 <int> <chr>    <chr>       <chr>          #>  1 2022-12-26    wk ahead inc flu h…       2 US       mean        NA             #>  2 2022-12-26    wk ahead inc flu h…       1 US       mean        NA             #>  3 2022-12-26    wk ahead inc flu h…       2 01       mean        NA             #>  4 2022-12-26    wk ahead inc flu h…       1 01       mean        NA             #>  5 2022-12-26    wk ahead inc flu h…       2 02       mean        NA             #>  6 2022-12-26    wk ahead inc flu h…       1 02       mean        NA             #>  7 2022-12-26    wk ahead inc flu h…       2 US       sample      1              #>  8 2022-12-26    wk ahead inc flu h…       1 US       sample      2              #>  9 2022-12-26    wk ahead inc flu h…       2 01       sample      3              #> 10 2022-12-26    wk ahead inc flu h…       1 01       sample      4              #> # ℹ 32 more rows # Subset output types config_tasks <- hubUtils::read_config(   system.file(\"testhubs\", \"samples\", package = \"hubValidations\") ) expand_model_out_grid(config_tasks,   round_id = \"2022-10-29\",   include_sample_ids = TRUE,   bind_model_tasks = FALSE,   output_types = c(\"sample\", \"pmf\"), ) #> [[1]] #> # A tibble: 2,560 × 7 #>    reference_date target            horizon location target_end_date output_type #>    <date>         <chr>               <int> <chr>    <date>          <chr>       #>  1 2022-10-29     wk flu hosp rate…       0 US       2022-10-22      pmf         #>  2 2022-10-29     wk flu hosp rate…       1 US       2022-10-22      pmf         #>  3 2022-10-29     wk flu hosp rate…       2 US       2022-10-22      pmf         #>  4 2022-10-29     wk flu hosp rate…       3 US       2022-10-22      pmf         #>  5 2022-10-29     wk flu hosp rate…       0 01       2022-10-22      pmf         #>  6 2022-10-29     wk flu hosp rate…       1 01       2022-10-22      pmf         #>  7 2022-10-29     wk flu hosp rate…       2 01       2022-10-22      pmf         #>  8 2022-10-29     wk flu hosp rate…       3 01       2022-10-22      pmf         #>  9 2022-10-29     wk flu hosp rate…       0 02       2022-10-22      pmf         #> 10 2022-10-29     wk flu hosp rate…       1 02       2022-10-22      pmf         #> # ℹ 2,550 more rows #> # ℹ 1 more variable: output_type_id <chr> #>  #> [[2]] #> # A tibble: 640 × 7 #>    reference_date target          horizon location target_end_date output_type #>    <date>         <chr>             <int> <chr>    <date>          <chr>       #>  1 2022-10-29     wk inc flu hosp       0 US       2022-10-22      sample      #>  2 2022-10-29     wk inc flu hosp       1 US       2022-10-22      sample      #>  3 2022-10-29     wk inc flu hosp       2 US       2022-10-22      sample      #>  4 2022-10-29     wk inc flu hosp       3 US       2022-10-22      sample      #>  5 2022-10-29     wk inc flu hosp       0 US       2022-10-29      sample      #>  6 2022-10-29     wk inc flu hosp       1 US       2022-10-29      sample      #>  7 2022-10-29     wk inc flu hosp       2 US       2022-10-29      sample      #>  8 2022-10-29     wk inc flu hosp       3 US       2022-10-29      sample      #>  9 2022-10-29     wk inc flu hosp       0 US       2022-11-05      sample      #> 10 2022-10-29     wk inc flu hosp       1 US       2022-11-05      sample      #> # ℹ 630 more rows #> # ℹ 1 more variable: output_type_id <chr> #>  expand_model_out_grid(config_tasks,   round_id = \"2022-10-29\",   include_sample_ids = TRUE,   bind_model_tasks = TRUE,   output_types = \"sample\", ) #> # A tibble: 640 × 7 #>    reference_date target          horizon location target_end_date output_type #>    <date>         <chr>             <int> <chr>    <date>          <chr>       #>  1 2022-10-29     wk inc flu hosp       0 US       2022-10-22      sample      #>  2 2022-10-29     wk inc flu hosp       1 US       2022-10-22      sample      #>  3 2022-10-29     wk inc flu hosp       2 US       2022-10-22      sample      #>  4 2022-10-29     wk inc flu hosp       3 US       2022-10-22      sample      #>  5 2022-10-29     wk inc flu hosp       0 US       2022-10-29      sample      #>  6 2022-10-29     wk inc flu hosp       1 US       2022-10-29      sample      #>  7 2022-10-29     wk inc flu hosp       2 US       2022-10-29      sample      #>  8 2022-10-29     wk inc flu hosp       3 US       2022-10-29      sample      #>  9 2022-10-29     wk inc flu hosp       0 US       2022-11-05      sample      #> 10 2022-10-29     wk inc flu hosp       1 US       2022-11-05      sample      #> # ℹ 630 more rows #> # ℹ 1 more variable: output_type_id <chr> # Ignore derived task IDs expand_model_out_grid(config_tasks,   round_id = \"2022-10-29\",   include_sample_ids = TRUE,   bind_model_tasks = FALSE,   output_types = \"sample\",   derived_task_ids = \"target_end_date\" ) #> [[1]] #> # A tibble: 0 × 0 #>  #> [[2]] #> # A tibble: 20 × 7 #>    reference_date target          horizon location target_end_date output_type #>    <date>         <chr>             <int> <chr>    <date>          <chr>       #>  1 2022-10-29     wk inc flu hosp       0 US       NA              sample      #>  2 2022-10-29     wk inc flu hosp       1 US       NA              sample      #>  3 2022-10-29     wk inc flu hosp       2 US       NA              sample      #>  4 2022-10-29     wk inc flu hosp       3 US       NA              sample      #>  5 2022-10-29     wk inc flu hosp       0 01       NA              sample      #>  6 2022-10-29     wk inc flu hosp       1 01       NA              sample      #>  7 2022-10-29     wk inc flu hosp       2 01       NA              sample      #>  8 2022-10-29     wk inc flu hosp       3 01       NA              sample      #>  9 2022-10-29     wk inc flu hosp       0 02       NA              sample      #> 10 2022-10-29     wk inc flu hosp       1 02       NA              sample      #> 11 2022-10-29     wk inc flu hosp       2 02       NA              sample      #> 12 2022-10-29     wk inc flu hosp       3 02       NA              sample      #> 13 2022-10-29     wk inc flu hosp       0 04       NA              sample      #> 14 2022-10-29     wk inc flu hosp       1 04       NA              sample      #> 15 2022-10-29     wk inc flu hosp       2 04       NA              sample      #> 16 2022-10-29     wk inc flu hosp       3 04       NA              sample      #> 17 2022-10-29     wk inc flu hosp       0 05       NA              sample      #> 18 2022-10-29     wk inc flu hosp       1 05       NA              sample      #> 19 2022-10-29     wk inc flu hosp       2 05       NA              sample      #> 20 2022-10-29     wk inc flu hosp       3 05       NA              sample      #> # ℹ 1 more variable: output_type_id <chr> #>"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/get_tbl_compound_taskid_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect the compound_taskid_set for a tbl for each modeling task in a given round. — get_tbl_compound_taskid_set","title":"Detect the compound_taskid_set for a tbl for each modeling task in a given round. — get_tbl_compound_taskid_set","text":"Detect compound_taskid_set tbl modeling task given round.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/get_tbl_compound_taskid_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect the compound_taskid_set for a tbl for each modeling task in a given round. — get_tbl_compound_taskid_set","text":"","code":"get_tbl_compound_taskid_set(   tbl,   config_tasks,   round_id,   compact = TRUE,   error = TRUE,   derived_task_ids = NULL )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/get_tbl_compound_taskid_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect the compound_taskid_set for a tbl for each modeling task in a given round. — get_tbl_compound_taskid_set","text":"tbl tibble/data.frame contents file validated. Column types must character. config_tasks list representantion tasks.json config file. round_id Character string. round ID. compact Logical. TRUE, output compacted remove NULL elements. error Logical. TRUE, error thrown compound task ID set valid. FALSE error detected, detected compound task ID set returned error attributes attached. derived_task_ids Character vector derived task ID names (task IDs whose values depend task IDs) ignore. Columns task ids contain NAs.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/get_tbl_compound_taskid_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect the compound_taskid_set for a tbl for each modeling task in a given round. — get_tbl_compound_taskid_set","text":"list vectors compound task IDs detected tbl, one modeling task round. compact TRUE, modeling tasks returning NULL elements removed.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/get_tbl_compound_taskid_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect the compound_taskid_set for a tbl for each modeling task in a given round. — get_tbl_compound_taskid_set","text":"","code":"hub_path <- system.file(\"testhubs/samples\", package = \"hubValidations\") file_path <- \"flu-base/2022-10-22-flu-base.csv\" round_id <- \"2022-10-22\" tbl <- read_model_out_file(   file_path = file_path,   hub_path = hub_path,   coerce_types = \"chr\" ) config_tasks <- hubUtils::read_config(hub_path, \"tasks\") get_tbl_compound_taskid_set(tbl, config_tasks, round_id) #> $`2` #> [1] \"reference_date\" \"location\"       #>  get_tbl_compound_taskid_set(tbl, config_tasks, round_id,   compact = FALSE ) #> $`1` #> NULL #>  #> $`2` #> [1] \"reference_date\" \"location\"       #>"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/is_success.html","id":null,"dir":"Reference","previous_headings":"","what":"Get status of a hub check — is_success","title":"Get status of a hub check — is_success","text":"Get status hub check","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/is_success.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get status of a hub check — is_success","text":"","code":"is_success(x)  is_failure(x)  is_error(x)  is_info(x)  not_pass(x)  is_exec_error(x)  is_exec_warn(x)  is_any_error(x)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/is_success.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get status of a hub check — is_success","text":"x object inherits class <hub_check> test.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/is_success.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get status of a hub check — is_success","text":"Logical. given status check TRUE?","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/is_success.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get status of a hub check — is_success","text":"is_success(): check success? is_failure(): check failure? is_error(): check error? is_info(): check info? not_pass(): check pass? is_exec_error(): exec error? is_exec_warn(): exec warning? is_any_error(): error exec error?","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/match_tbl_to_model_task.html","id":null,"dir":"Reference","previous_headings":"","what":"Match model output tbl data to their model tasks in config_tasks. — match_tbl_to_model_task","title":"Match model output tbl data to their model tasks in config_tasks. — match_tbl_to_model_task","text":"Split match model output tbl data corresponding model tasks config_tasks. Useful performing model task specific checks model output. v3 samples, output_type_id column set NA sample outputs.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/match_tbl_to_model_task.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match model output tbl data to their model tasks in config_tasks. — match_tbl_to_model_task","text":"","code":"match_tbl_to_model_task(   tbl,   config_tasks,   round_id,   output_types = NULL,   derived_task_ids = NULL,   all_character = TRUE )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/match_tbl_to_model_task.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match model output tbl data to their model tasks in config_tasks. — match_tbl_to_model_task","text":"tbl tibble/data.frame contents file validated. config_tasks list version content's hub's tasks.json config file, accessed \"config_tasks\" attribute <hub_connection> object function hubUtils::read_config(). round_id Character string. Round identifier. round set round_id_from_variable: true, IDs values task ID defined round's round_id property config_tasks. Otherwise match round's round_id value config. Ignored hub contains single round. output_types Character vector output type names include. Use subset grids specific output types. derived_task_ids Character vector derived task ID names (task IDs whose values depend task IDs) ignore. Columns task ids contain NAs. all_character Logical. Whether return character column.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/match_tbl_to_model_task.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match model output tbl data to their model tasks in config_tasks. — match_tbl_to_model_task","text":"list containing tbl_df model output data matched model task one element per round model task.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/match_tbl_to_model_task.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match model output tbl data to their model tasks in config_tasks. — match_tbl_to_model_task","text":"","code":"hub_path <- system.file(\"testhubs/samples\", package = \"hubValidations\") tbl <- read_model_out_file(   file_path = \"flu-base/2022-10-22-flu-base.csv\",   hub_path, coerce_types = \"chr\" ) config_tasks <- hubUtils::read_config(hub_path, \"tasks\") match_tbl_to_model_task(tbl, config_tasks, round_id = \"2022-10-22\") #> [[1]] #> # A tibble: 60 × 8 #>    reference_date target            horizon location target_end_date output_type #>    <chr>          <chr>             <chr>   <chr>    <chr>           <chr>       #>  1 2022-10-22     wk flu hosp rate… 0       US       2022-10-22      pmf         #>  2 2022-10-22     wk flu hosp rate… 0       01       2022-10-22      pmf         #>  3 2022-10-22     wk flu hosp rate… 0       02       2022-10-22      pmf         #>  4 2022-10-22     wk flu hosp rate… 0       04       2022-10-22      pmf         #>  5 2022-10-22     wk flu hosp rate… 0       05       2022-10-22      pmf         #>  6 2022-10-22     wk flu hosp rate… 1       US       2022-10-29      pmf         #>  7 2022-10-22     wk flu hosp rate… 1       01       2022-10-29      pmf         #>  8 2022-10-22     wk flu hosp rate… 1       02       2022-10-29      pmf         #>  9 2022-10-22     wk flu hosp rate… 1       04       2022-10-29      pmf         #> 10 2022-10-22     wk flu hosp rate… 1       05       2022-10-29      pmf         #> # ℹ 50 more rows #> # ℹ 2 more variables: output_type_id <chr>, value <chr> #>  #> [[2]] #> # A tibble: 1,530 × 8 #>    reference_date target          horizon location target_end_date output_type #>    <chr>          <chr>           <chr>   <chr>    <chr>           <chr>       #>  1 2022-10-22     wk inc flu hosp 0       US       2022-10-22      mean        #>  2 2022-10-22     wk inc flu hosp 0       01       2022-10-22      mean        #>  3 2022-10-22     wk inc flu hosp 0       02       2022-10-22      mean        #>  4 2022-10-22     wk inc flu hosp 0       04       2022-10-22      mean        #>  5 2022-10-22     wk inc flu hosp 0       05       2022-10-22      mean        #>  6 2022-10-22     wk inc flu hosp 1       US       2022-10-29      mean        #>  7 2022-10-22     wk inc flu hosp 1       01       2022-10-29      mean        #>  8 2022-10-22     wk inc flu hosp 1       02       2022-10-29      mean        #>  9 2022-10-22     wk inc flu hosp 1       04       2022-10-29      mean        #> 10 2022-10-22     wk inc flu hosp 1       05       2022-10-29      mean        #> # ℹ 1,520 more rows #> # ℹ 2 more variables: output_type_id <chr>, value <chr> #>  match_tbl_to_model_task(tbl, config_tasks,   round_id = \"2022-10-22\",   output_types = \"sample\" ) #> [[1]] #> NULL #>  #> [[2]] #> # A tibble: 1,500 × 8 #>    reference_date target          horizon location target_end_date output_type #>    <chr>          <chr>           <chr>   <chr>    <chr>           <chr>       #>  1 2022-10-22     wk inc flu hosp 0       US       2022-10-22      sample      #>  2 2022-10-22     wk inc flu hosp 0       US       2022-10-22      sample      #>  3 2022-10-22     wk inc flu hosp 0       US       2022-10-22      sample      #>  4 2022-10-22     wk inc flu hosp 0       US       2022-10-22      sample      #>  5 2022-10-22     wk inc flu hosp 0       US       2022-10-22      sample      #>  6 2022-10-22     wk inc flu hosp 0       US       2022-10-22      sample      #>  7 2022-10-22     wk inc flu hosp 0       US       2022-10-22      sample      #>  8 2022-10-22     wk inc flu hosp 0       US       2022-10-22      sample      #>  9 2022-10-22     wk inc flu hosp 0       US       2022-10-22      sample      #> 10 2022-10-22     wk inc flu hosp 0       US       2022-10-22      sample      #> # ℹ 1,490 more rows #> # ℹ 2 more variables: output_type_id <chr>, value <chr> #>"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/new_hub_validations.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new or convert list to hub_validations S3 class object — new_hub_validations","title":"Create new or convert list to hub_validations S3 class object — new_hub_validations","text":"Create new convert list hub_validations S3 class object","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/new_hub_validations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new or convert list to hub_validations S3 class object — new_hub_validations","text":"","code":"new_hub_validations(...)  as_hub_validations(x)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/new_hub_validations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new or convert list to hub_validations S3 class object — new_hub_validations","text":"... named elements included. element must object inherits class <hub_check>. x list named elements. element must object inherits class <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/new_hub_validations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new or convert list to hub_validations S3 class object — new_hub_validations","text":"S3 object class <hub_validations>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/new_hub_validations.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create new or convert list to hub_validations S3 class object — new_hub_validations","text":"new_hub_validations(): Create new <hub_validations> S3 class object as_hub_validations(): Convert list <hub_validations> S3 class object","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/new_hub_validations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create new or convert list to hub_validations S3 class object — new_hub_validations","text":"","code":"new_hub_validations() #> Empty <hub_validations>  hub_path <- system.file(\"testhubs/simple\", package = \"hubValidations\") file_path <- \"team1-goodmodel/2022-10-08-team1-goodmodel.csv\" new_hub_validations(   file_exists = check_file_exists(file_path, hub_path),   file_name = check_file_name(file_path) ) #>  #> ── 2022-10-08-team1-goodmodel.csv ──── #>  #> ✔ [file_exists]: File exists at path #>   model-output/team1-goodmodel/2022-10-08-team1-goodmodel.csv. #> ✔ [file_name]: File name \"2022-10-08-team1-goodmodel.csv\" is valid. x <- list(   file_exists = check_file_exists(file_path, hub_path),   file_name = check_file_name(file_path) ) as_hub_validations(x) #>  #> ── 2022-10-08-team1-goodmodel.csv ──── #>  #> ✔ [file_exists]: File exists at path #>   model-output/team1-goodmodel/2022-10-08-team1-goodmodel.csv. #> ✔ [file_name]: File name \"2022-10-08-team1-goodmodel.csv\" is valid."},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/opt_check_metadata_team_max_model_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that submitting team does not exceed maximum number of allowed models per team — opt_check_metadata_team_max_model_n","title":"Check that submitting team does not exceed maximum number of allowed models per team — opt_check_metadata_team_max_model_n","text":"Check submitting team exceed maximum number allowed models per team","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/opt_check_metadata_team_max_model_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that submitting team does not exceed maximum number of allowed models per team — opt_check_metadata_team_max_model_n","text":"","code":"opt_check_metadata_team_max_model_n(file_path, hub_path, n_max = 2L)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/opt_check_metadata_team_max_model_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that submitting team does not exceed maximum number of allowed models per team — opt_check_metadata_team_max_model_n","text":"file_path character string. Path file validated relative hub's model-metadata directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. n_max Integer. Number maximum allowed models per team.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/opt_check_metadata_team_max_model_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that submitting team does not exceed maximum number of allowed models per team — opt_check_metadata_team_max_model_n","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_failure> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/opt_check_metadata_team_max_model_n.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check that submitting team does not exceed maximum number of allowed models per team — opt_check_metadata_team_max_model_n","text":"deployed part validate_model_metadata optional checks.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/opt_check_tbl_col_timediff.html","id":null,"dir":"Reference","previous_headings":"","what":"Check time difference between values in two date columns equal a defined period. — opt_check_tbl_col_timediff","title":"Check time difference between values in two date columns equal a defined period. — opt_check_tbl_col_timediff","text":"Check time difference values two date columns equal defined period.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/opt_check_tbl_col_timediff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check time difference between values in two date columns equal a defined period. — opt_check_tbl_col_timediff","text":"","code":"opt_check_tbl_col_timediff(   tbl,   file_path,   hub_path,   t0_colname,   t1_colname,   timediff = lubridate::weeks(2),   output_type_id_datatype = c(\"from_config\", \"auto\", \"character\", \"double\", \"integer\",     \"logical\", \"Date\") )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/opt_check_tbl_col_timediff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check time difference between values in two date columns equal a defined period. — opt_check_tbl_col_timediff","text":"tbl tibble/data.frame contents file validated. file_path character string. Path file validated relative hub's model-output directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. t0_colname Character string. name time zero date column. t1_colname Character string. name time zero + 1 time step date column. timediff object class lubridate Period length 1. output_type_id_datatype character string. One \"from_config\", \"auto\", \"character\", \"double\", \"integer\", \"logical\", \"Date\". Defaults \"from_config\" uses setting output_type_id_datatype property tasks.json config file available. property set config, argument falls back \"auto\" determines  output_type_id data type automatically tasks.json config file simplest data type required represent output type ID values across output types hub. data type values can used override automatic determination. Note attempting coerce output_type_id data type valid data (e.g. trying coerce\"character\" values \"double\") likely result error potentially unexpected behaviour use care.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/opt_check_tbl_col_timediff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check time difference between values in two date columns equal a defined period. — opt_check_tbl_col_timediff","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_failure> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/opt_check_tbl_col_timediff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check time difference between values in two date columns equal a defined period. — opt_check_tbl_col_timediff","text":"deployed part validate_model_data optional checks.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/opt_check_tbl_counts_lt_popn.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that predicted values per location are less than total location population. — opt_check_tbl_counts_lt_popn","title":"Check that predicted values per location are less than total location population. — opt_check_tbl_counts_lt_popn","text":"Check predicted values per location less total location population.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/opt_check_tbl_counts_lt_popn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that predicted values per location are less than total location population. — opt_check_tbl_counts_lt_popn","text":"","code":"opt_check_tbl_counts_lt_popn(   tbl,   file_path,   hub_path,   targets = NULL,   popn_file_path = \"auxiliary-data/locations.csv\",   popn_col = \"population\",   location_col = \"location\" )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/opt_check_tbl_counts_lt_popn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that predicted values per location are less than total location population. — opt_check_tbl_counts_lt_popn","text":"tbl tibble/data.frame contents file validated. file_path character string. Path file validated relative hub's model-output directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. targets Either single target key list list multiple target key lists. popn_file_path Character string. Path population data relative hub root. Defaults auxiliary-data/locations.csv. popn_col Character string. name population size column population data set. location_col Character string. name location column. Used join population data submission file data. Must shared files.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/opt_check_tbl_counts_lt_popn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that predicted values per location are less than total location population. — opt_check_tbl_counts_lt_popn","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_failure> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/opt_check_tbl_counts_lt_popn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check that predicted values per location are less than total location population. — opt_check_tbl_counts_lt_popn","text":"applied rows containing count predictions. Use argument targets filter tbl data appropriate count target rows. deployed part validate_model_data optional checks.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/opt_check_tbl_counts_lt_popn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that predicted values per location are less than total location population. — opt_check_tbl_counts_lt_popn","text":"","code":"hub_path <- system.file(\"testhubs/flusight\", package = \"hubValidations\") file_path <- \"hub-ensemble/2023-05-08-hub-ensemble.parquet\" tbl <- hubValidations::read_model_out_file(file_path, hub_path) # Single target key list targets <- list(\"target\" = \"wk ahead inc flu hosp\") opt_check_tbl_counts_lt_popn(tbl, file_path, hub_path, targets = targets) #> <message/check_success> #> Message: #> Target counts are less than location population size."},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/opt_check_tbl_horizon_timediff.html","id":null,"dir":"Reference","previous_headings":"","what":"Check time difference between values in two date columns equals a defined time period defined by values in a horizon column — opt_check_tbl_horizon_timediff","title":"Check time difference between values in two date columns equals a defined time period defined by values in a horizon column — opt_check_tbl_horizon_timediff","text":"Check time difference values two date columns equals defined time period defined values horizon column","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/opt_check_tbl_horizon_timediff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check time difference between values in two date columns equals a defined time period defined by values in a horizon column — opt_check_tbl_horizon_timediff","text":"","code":"opt_check_tbl_horizon_timediff(   tbl,   file_path,   hub_path,   t0_colname,   t1_colname,   horizon_colname = \"horizon\",   timediff = lubridate::weeks(),   output_type_id_datatype = c(\"from_config\", \"auto\", \"character\", \"double\", \"integer\",     \"logical\", \"Date\") )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/opt_check_tbl_horizon_timediff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check time difference between values in two date columns equals a defined time period defined by values in a horizon column — opt_check_tbl_horizon_timediff","text":"tbl tibble/data.frame contents file validated. file_path character string. Path file validated relative hub's model-output directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. t0_colname Character string. name time zero date column. t1_colname Character string. name time zero + 1 time step date column. horizon_colname Character string. name horizon column. Defaults \"horizon\". timediff object class lubridate Period length 1. period single horizon. Default 1 week. output_type_id_datatype character string. One \"from_config\", \"auto\", \"character\", \"double\", \"integer\", \"logical\", \"Date\". Defaults \"from_config\" uses setting output_type_id_datatype property tasks.json config file available. property set config, argument falls back \"auto\" determines  output_type_id data type automatically tasks.json config file simplest data type required represent output type ID values across output types hub. data type values can used override automatic determination. Note attempting coerce output_type_id data type valid data (e.g. trying coerce\"character\" values \"double\") likely result error potentially unexpected behaviour use care.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/opt_check_tbl_horizon_timediff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check time difference between values in two date columns equals a defined time period defined by values in a horizon column — opt_check_tbl_horizon_timediff","text":"Depending whether validation succeeded, one : <message/check_success> condition class object. <error/check_failure> condition class object. Returned object also inherits subclass <hub_check>.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/opt_check_tbl_horizon_timediff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check time difference between values in two date columns equals a defined time period defined by values in a horizon column — opt_check_tbl_horizon_timediff","text":"deployed part validate_model_data optional checks.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/parse_file_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse model output file metadata from file name — parse_file_name","title":"Parse model output file metadata from file name — parse_file_name","text":"Parse model output file metadata file name","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/parse_file_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse model output file metadata from file name — parse_file_name","text":"","code":"parse_file_name(file_path, file_type = c(\"model_output\", \"model_metadata\"))"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/parse_file_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse model output file metadata from file name — parse_file_name","text":"file_path Character string. model output file name. Can include parent directories ignored. file_type Character string. Type file name parsed. One \"model_output\" \"model_metadata\".","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/parse_file_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse model output file metadata from file name — parse_file_name","text":"list following elements: round_id: round ID model output associated (NA model metadata files.) team_abbr: team responsible model. model_abbr: name model. model_id: unique model ID derived concatenation <team_abbr>-<model_abbr>. ext: file extension. compression_ext: optional. compression extension present.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/parse_file_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse model output file metadata from file name — parse_file_name","text":"File names allowed contain following compression extension prefixes: .snappy, .gzip, .gz, .brotli, .zstd, .lz4, .lzo, .bz2. extension prefixes now extracted parsing file name returned compression_ext element present.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/parse_file_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse model output file metadata from file name — parse_file_name","text":"","code":"parse_file_name(\"hub-baseline/2022-10-15-hub-baseline.csv\") #> $round_id #> [1] \"2022-10-15\" #>  #> $team_abbr #> [1] \"hub\" #>  #> $model_abbr #> [1] \"baseline\" #>  #> $model_id #> [1] \"hub-baseline\" #>  #> $ext #> [1] \"csv\" #>  parse_file_name(\"hub-baseline/2022-10-15-hub-baseline.gzip.parquet\") #> $round_id #> [1] \"2022-10-15\" #>  #> $team_abbr #> [1] \"hub\" #>  #> $model_abbr #> [1] \"baseline\" #>  #> $model_id #> [1] \"hub-baseline\" #>  #> $ext #> [1] \"parquet\" #>  #> $compression_ext #> [1] \"gzip\" #>"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/print.hub_validations.html","id":null,"dir":"Reference","previous_headings":"","what":"Print results of validate_...() function as a bullet list — print.hub_validations","title":"Print results of validate_...() function as a bullet list — print.hub_validations","text":"Print results validate_...() function bullet list","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/print.hub_validations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print results of validate_...() function as a bullet list — print.hub_validations","text":"","code":"# S3 method for class 'hub_validations' print(x, ...)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/print.hub_validations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print results of validate_...() function as a bullet list — print.hub_validations","text":"x object class hub_validations ... Unused argument present class consistency","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/print.pr_hub_validations.html","id":null,"dir":"Reference","previous_headings":"","what":"Print results of validate_pr() function as a bullet list — print.pr_hub_validations","title":"Print results of validate_pr() function as a bullet list — print.pr_hub_validations","text":"Print results validate_pr() function bullet list","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/print.pr_hub_validations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print results of validate_pr() function as a bullet list — print.pr_hub_validations","text":"","code":"# S3 method for class 'pr_hub_validations' print(x, ...)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/print.pr_hub_validations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print results of validate_pr() function as a bullet list — print.pr_hub_validations","text":"x object class pr_hub_validations ... Unused argument present class consistency","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/read_model_out_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a model output file — read_model_out_file","title":"Read a model output file — read_model_out_file","text":"Read model output file","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/read_model_out_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a model output file — read_model_out_file","text":"","code":"read_model_out_file(   file_path,   hub_path = \".\",   coerce_types = c(\"hub\", \"chr\", \"none\"),   output_type_id_datatype = c(\"from_config\", \"auto\", \"character\", \"double\", \"integer\",     \"logical\", \"Date\") )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/read_model_out_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a model output file — read_model_out_file","text":"file_path character string. Path file validated relative hub's model-output directory. hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. coerce_types character. coerce column types read. hub: (default) read (csv) coerce (parquet, arrow) hub schema. coercing data types using hub schema, output_type_id_datatype can also used set output_type_id column data type manually. chr: read (csv) coerce (parquet, arrow) columns character. none: coercion. Use arrow read_* function defaults. output_type_id_datatype character string. One \"from_config\", \"auto\", \"character\", \"double\", \"integer\", \"logical\", \"Date\". Defaults \"from_config\" uses setting output_type_id_datatype property tasks.json config file available. property set config, argument falls back \"auto\" determines  output_type_id data type automatically tasks.json config file simplest data type required represent output type ID values across output types hub. data type values can used override automatic determination. Note attempting coerce output_type_id data type valid data (e.g. trying coerce\"character\" values \"double\") likely result error potentially unexpected behaviour use care.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/read_model_out_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a model output file — read_model_out_file","text":"tibble contents model output file.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/submission_tmpl.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a model output submission file template — submission_tmpl","title":"Create a model output submission file template — submission_tmpl","text":"Create model output submission file template","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/submission_tmpl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a model output submission file template — submission_tmpl","text":"","code":"submission_tmpl(   hub_con,   config_tasks,   round_id,   required_vals_only = FALSE,   complete_cases_only = TRUE,   compound_taskid_set = NULL,   output_types = NULL,   derived_task_ids = NULL )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/submission_tmpl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a model output submission file template — submission_tmpl","text":"hub_con ⁠<hub_connection>⁠ class object. config_tasks list version content's hub's tasks.json config file, accessed \"config_tasks\" attribute <hub_connection> object function hubUtils::read_config(). round_id Character string. Round identifier. round set round_id_from_variable: true, IDs values task ID defined round's round_id property config_tasks. Otherwise match round's round_id value config. Ignored hub contains single round. required_vals_only Logical. Whether return combinations Task ID related output type ID required values. complete_cases_only Logical. TRUE (default) required_vals_only = TRUE, rows complete cases combinations required values returned. FALSE, rows incomplete cases combinations required values included output. compound_taskid_set List character vectors, one modeling task round. Can used override compound task ID set defined config. NULL provided given modeling task, compound task ID set task IDs used. output_types Character vector output type names include. Use subset grids specific output types. derived_task_ids Character vector derived task ID names (task IDs whose values depend task IDs) ignore. Columns task ids contain NAs.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/submission_tmpl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a model output submission file template — submission_tmpl","text":"tibble template containing expanded grid valid task ID output type ID value combinations given submission round output type. required_vals_only = TRUE, values limited combination required values .","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/submission_tmpl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a model output submission file template — submission_tmpl","text":"task IDs output_type_ids values optional, default, columns included columns NAs required_vals_only = TRUE. columns exist, function returns tibble zero rows, complete cases required value combinations exists. (Note determination complete cases excludes valid NA output_type_id values \"mean\" \"median\" output types). return template incomplete required cases, includes NA columns, use complete_cases_only = FALSE. sample output types included output, output_type_id column contains example sample indexes useful identifying compound task ID structure multivariate sampling distributions particular, .e. combinations task ID values represent individual samples. round set round_id_from_variable: true, value task ID round IDs derived (.e. task ID specified round_id property config_tasks) set value round_id argument returned output.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/submission_tmpl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a model output submission file template — submission_tmpl","text":"","code":"hub_con <- hubData::connect_hub(   system.file(\"testhubs/flusight\", package = \"hubUtils\") ) submission_tmpl(hub_con, round_id = \"2023-01-02\") #> # A tibble: 3,132 × 7 #>    forecast_date target        horizon location output_type output_type_id value #>    <date>        <chr>           <int> <chr>    <chr>       <chr>          <dbl> #>  1 2023-01-02    wk flu hosp …       2 US       pmf         large_decrease    NA #>  2 2023-01-02    wk flu hosp …       1 US       pmf         large_decrease    NA #>  3 2023-01-02    wk flu hosp …       2 01       pmf         large_decrease    NA #>  4 2023-01-02    wk flu hosp …       1 01       pmf         large_decrease    NA #>  5 2023-01-02    wk flu hosp …       2 02       pmf         large_decrease    NA #>  6 2023-01-02    wk flu hosp …       1 02       pmf         large_decrease    NA #>  7 2023-01-02    wk flu hosp …       2 04       pmf         large_decrease    NA #>  8 2023-01-02    wk flu hosp …       1 04       pmf         large_decrease    NA #>  9 2023-01-02    wk flu hosp …       2 05       pmf         large_decrease    NA #> 10 2023-01-02    wk flu hosp …       1 05       pmf         large_decrease    NA #> # ℹ 3,122 more rows submission_tmpl(   hub_con,   round_id = \"2023-01-02\",   required_vals_only = TRUE ) #> # A tibble: 0 × 7 #> # ℹ 7 variables: forecast_date <date>, target <chr>, horizon <int>, #> #   location <chr>, output_type <chr>, output_type_id <chr>, value <dbl> submission_tmpl(   hub_con,   round_id = \"2023-01-02\",   required_vals_only = TRUE,   complete_cases_only = FALSE ) #> ! Column \"target\" whose values are all optional included as all `NA` column. #> ! Round contains more than one modeling task (2) #> ℹ See Hub's tasks.json file or <hub_connection> attribute \"config_tasks\" for #>   details of optional task ID/output_type/output_type ID value combinations. #> # A tibble: 28 × 7 #>    forecast_date target horizon location output_type output_type_id value #>    <date>        <chr>    <int> <chr>    <chr>       <chr>          <dbl> #>  1 2023-01-02    NA           2 US       pmf         large_decrease    NA #>  2 2023-01-02    NA           2 US       pmf         decrease          NA #>  3 2023-01-02    NA           2 US       pmf         stable            NA #>  4 2023-01-02    NA           2 US       pmf         increase          NA #>  5 2023-01-02    NA           2 US       pmf         large_increase    NA #>  6 2023-01-02    NA           2 US       quantile    0.01              NA #>  7 2023-01-02    NA           2 US       quantile    0.025             NA #>  8 2023-01-02    NA           2 US       quantile    0.05              NA #>  9 2023-01-02    NA           2 US       quantile    0.1               NA #> 10 2023-01-02    NA           2 US       quantile    0.15              NA #> # ℹ 18 more rows # Specifying a round in a hub with multiple rounds hub_con <- hubData::connect_hub(   system.file(\"testhubs/simple\", package = \"hubUtils\") ) submission_tmpl(hub_con, round_id = \"2022-10-01\") #> # A tibble: 5,184 × 7 #>    origin_date target          horizon location output_type output_type_id value #>    <date>      <chr>             <int> <chr>    <chr>                <dbl> <int> #>  1 2022-10-01  wk inc flu hosp       1 US       mean                    NA    NA #>  2 2022-10-01  wk inc flu hosp       2 US       mean                    NA    NA #>  3 2022-10-01  wk inc flu hosp       3 US       mean                    NA    NA #>  4 2022-10-01  wk inc flu hosp       4 US       mean                    NA    NA #>  5 2022-10-01  wk inc flu hosp       1 01       mean                    NA    NA #>  6 2022-10-01  wk inc flu hosp       2 01       mean                    NA    NA #>  7 2022-10-01  wk inc flu hosp       3 01       mean                    NA    NA #>  8 2022-10-01  wk inc flu hosp       4 01       mean                    NA    NA #>  9 2022-10-01  wk inc flu hosp       1 02       mean                    NA    NA #> 10 2022-10-01  wk inc flu hosp       2 02       mean                    NA    NA #> # ℹ 5,174 more rows submission_tmpl(hub_con, round_id = \"2022-10-29\") #> # A tibble: 25,920 × 8 #>    origin_date target      horizon location age_group output_type output_type_id #>    <date>      <chr>         <int> <chr>    <chr>     <chr>                <dbl> #>  1 2022-10-29  wk inc flu…       1 US       65+       mean                    NA #>  2 2022-10-29  wk inc flu…       2 US       65+       mean                    NA #>  3 2022-10-29  wk inc flu…       3 US       65+       mean                    NA #>  4 2022-10-29  wk inc flu…       4 US       65+       mean                    NA #>  5 2022-10-29  wk inc flu…       1 01       65+       mean                    NA #>  6 2022-10-29  wk inc flu…       2 01       65+       mean                    NA #>  7 2022-10-29  wk inc flu…       3 01       65+       mean                    NA #>  8 2022-10-29  wk inc flu…       4 01       65+       mean                    NA #>  9 2022-10-29  wk inc flu…       1 02       65+       mean                    NA #> 10 2022-10-29  wk inc flu…       2 02       65+       mean                    NA #> # ℹ 25,910 more rows #> # ℹ 1 more variable: value <int> submission_tmpl(hub_con,   round_id = \"2022-10-29\",   required_vals_only = TRUE ) #> # A tibble: 0 × 8 #> # ℹ 8 variables: origin_date <date>, target <chr>, horizon <int>, #> #   location <chr>, age_group <chr>, output_type <chr>, output_type_id <dbl>, #> #   value <int> submission_tmpl(hub_con,   round_id = \"2022-10-29\",   required_vals_only = TRUE,   complete_cases_only = FALSE ) #> ! Column \"location\" whose values are all optional included as all `NA` column. #> ℹ See Hub's tasks.json file or <hub_connection> attribute \"config_tasks\" for #>   details of optional task ID/output_type/output_type ID value combinations. #> # A tibble: 23 × 8 #>    origin_date target      horizon location age_group output_type output_type_id #>    <date>      <chr>         <int> <chr>    <chr>     <chr>                <dbl> #>  1 2022-10-29  wk inc flu…       1 NA       65+       quantile             0.01  #>  2 2022-10-29  wk inc flu…       1 NA       65+       quantile             0.025 #>  3 2022-10-29  wk inc flu…       1 NA       65+       quantile             0.05  #>  4 2022-10-29  wk inc flu…       1 NA       65+       quantile             0.1   #>  5 2022-10-29  wk inc flu…       1 NA       65+       quantile             0.15  #>  6 2022-10-29  wk inc flu…       1 NA       65+       quantile             0.2   #>  7 2022-10-29  wk inc flu…       1 NA       65+       quantile             0.25  #>  8 2022-10-29  wk inc flu…       1 NA       65+       quantile             0.3   #>  9 2022-10-29  wk inc flu…       1 NA       65+       quantile             0.35  #> 10 2022-10-29  wk inc flu…       1 NA       65+       quantile             0.4   #> # ℹ 13 more rows #> # ℹ 1 more variable: value <int> # Hub with sample output type config_tasks <- hubUtils::read_config_file(system.file(\"config\", \"tasks.json\",   package = \"hubValidations\" )) submission_tmpl(   config_tasks = config_tasks,   round_id = \"2022-12-26\" ) #> # A tibble: 42 × 7 #>    forecast_date target        horizon location output_type output_type_id value #>    <date>        <chr>           <int> <chr>    <chr>       <chr>          <dbl> #>  1 2022-12-26    wk ahead inc…       2 US       mean        NA                NA #>  2 2022-12-26    wk ahead inc…       1 US       mean        NA                NA #>  3 2022-12-26    wk ahead inc…       2 01       mean        NA                NA #>  4 2022-12-26    wk ahead inc…       1 01       mean        NA                NA #>  5 2022-12-26    wk ahead inc…       2 02       mean        NA                NA #>  6 2022-12-26    wk ahead inc…       1 02       mean        NA                NA #>  7 2022-12-26    wk ahead inc…       2 US       sample      s1                NA #>  8 2022-12-26    wk ahead inc…       1 US       sample      s2                NA #>  9 2022-12-26    wk ahead inc…       2 01       sample      s3                NA #> 10 2022-12-26    wk ahead inc…       1 01       sample      s4                NA #> # ℹ 32 more rows # Hub with sample output type and compound task ID structure config_tasks <- hubUtils::read_config_file(system.file(\"config\", \"tasks-comp-tid.json\",   package = \"hubValidations\" )) submission_tmpl(   config_tasks = config_tasks,   round_id = \"2022-12-26\" ) #> # A tibble: 42 × 7 #>    forecast_date target        horizon location output_type output_type_id value #>    <date>        <chr>           <int> <chr>    <chr>       <chr>          <dbl> #>  1 2022-12-26    wk ahead inc…       2 US       mean        NA                NA #>  2 2022-12-26    wk ahead inc…       1 US       mean        NA                NA #>  3 2022-12-26    wk ahead inc…       2 01       mean        NA                NA #>  4 2022-12-26    wk ahead inc…       1 01       mean        NA                NA #>  5 2022-12-26    wk ahead inc…       2 02       mean        NA                NA #>  6 2022-12-26    wk ahead inc…       1 02       mean        NA                NA #>  7 2022-12-26    wk ahead inc…       2 US       sample      1                 NA #>  8 2022-12-26    wk ahead inc…       2 01       sample      1                 NA #>  9 2022-12-26    wk ahead inc…       2 02       sample      1                 NA #> 10 2022-12-26    wk ahead inc…       1 US       sample      2                 NA #> # ℹ 32 more rows # Override config compound task ID set # Create coarser compound task ID set for the first modeling task which contains # samples submission_tmpl(   config_tasks = config_tasks,   round_id = \"2022-12-26\",   compound_taskid_set = list(     c(\"forecast_date\", \"target\"),     NULL   ) ) #> # A tibble: 42 × 7 #>    forecast_date target        horizon location output_type output_type_id value #>    <date>        <chr>           <int> <chr>    <chr>       <chr>          <dbl> #>  1 2022-12-26    wk ahead inc…       2 US       mean        NA                NA #>  2 2022-12-26    wk ahead inc…       1 US       mean        NA                NA #>  3 2022-12-26    wk ahead inc…       2 01       mean        NA                NA #>  4 2022-12-26    wk ahead inc…       1 01       mean        NA                NA #>  5 2022-12-26    wk ahead inc…       2 02       mean        NA                NA #>  6 2022-12-26    wk ahead inc…       1 02       mean        NA                NA #>  7 2022-12-26    wk ahead inc…       2 US       sample      1                 NA #>  8 2022-12-26    wk ahead inc…       1 US       sample      1                 NA #>  9 2022-12-26    wk ahead inc…       2 01       sample      1                 NA #> 10 2022-12-26    wk ahead inc…       1 01       sample      1                 NA #> # ℹ 32 more rows # Subsetting for a single output type submission_tmpl(   config_tasks = config_tasks,   round_id = \"2022-12-26\",   output_types = \"sample\" ) #> # A tibble: 6 × 7 #>   forecast_date target         horizon location output_type output_type_id value #>   <date>        <chr>            <int> <chr>    <chr>       <chr>          <dbl> #> 1 2022-12-26    wk ahead inc …       2 US       sample      1                 NA #> 2 2022-12-26    wk ahead inc …       2 01       sample      1                 NA #> 3 2022-12-26    wk ahead inc …       2 02       sample      1                 NA #> 4 2022-12-26    wk ahead inc …       1 US       sample      2                 NA #> 5 2022-12-26    wk ahead inc …       1 01       sample      2                 NA #> 6 2022-12-26    wk ahead inc …       1 02       sample      2                 NA # Derive a template with ignored derived task ID. Useful to avoid creating # a template with invalid derived task ID value combinations. config_tasks <- hubUtils::read_config(   system.file(\"testhubs\", \"flusight\", package = \"hubValidations\") ) submission_tmpl(   config_tasks = config_tasks,   round_id = \"2022-12-12\",   output_types = \"pmf\",   derived_task_ids = \"target_end_date\",   complete_cases_only = FALSE ) #> # A tibble: 540 × 8 #>    forecast_date target_end_date target             horizon location output_type #>    <date>        <date>          <chr>                <int> <chr>    <chr>       #>  1 2022-12-12    NA              wk flu hosp rate …       2 US       pmf         #>  2 2022-12-12    NA              wk flu hosp rate …       1 US       pmf         #>  3 2022-12-12    NA              wk flu hosp rate …       2 01       pmf         #>  4 2022-12-12    NA              wk flu hosp rate …       1 01       pmf         #>  5 2022-12-12    NA              wk flu hosp rate …       2 02       pmf         #>  6 2022-12-12    NA              wk flu hosp rate …       1 02       pmf         #>  7 2022-12-12    NA              wk flu hosp rate …       2 04       pmf         #>  8 2022-12-12    NA              wk flu hosp rate …       1 04       pmf         #>  9 2022-12-12    NA              wk flu hosp rate …       2 05       pmf         #> 10 2022-12-12    NA              wk flu hosp rate …       1 05       pmf         #> # ℹ 530 more rows #> # ℹ 2 more variables: output_type_id <chr>, value <dbl>"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/try_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap check expression in try to capture check execution errors — try_check","title":"Wrap check expression in try to capture check execution errors — try_check","text":"Wrap check expression try capture check execution errors","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/try_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap check expression in try to capture check execution errors — try_check","text":"","code":"try_check(expr, file_path)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/try_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap check expression in try to capture check execution errors — try_check","text":"expr check function expression run. file_path character string. Path file validated relative hub's model-output directory.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/try_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap check expression in try to capture check execution errors — try_check","text":"expr executes correctly, output expr returned. execution fails, object class <error/check_exec_error> returned. execution error message attached attribute msg.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_model_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the contents of a submitted model data file — validate_model_data","title":"Validate the contents of a submitted model data file — validate_model_data","text":"Validate contents submitted model data file","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_model_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the contents of a submitted model data file — validate_model_data","text":"","code":"validate_model_data(   hub_path,   file_path,   round_id_col = NULL,   output_type_id_datatype = c(\"from_config\", \"auto\", \"character\", \"double\", \"integer\",     \"logical\", \"Date\"),   validations_cfg_path = NULL,   derived_task_ids = NULL )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_model_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the contents of a submitted model data file — validate_model_data","text":"hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. file_path character string. Path file validated relative hub's model-output directory. round_id_col Character string. name column containing round_ids. Usually, value round property round_id hub tasks.json config file. Defaults NULL determined config applicable. output_type_id_datatype character string. One \"from_config\", \"auto\", \"character\", \"double\", \"integer\", \"logical\", \"Date\". Defaults \"from_config\" uses setting output_type_id_datatype property tasks.json config file available. property set config, argument falls back \"auto\" determines  output_type_id data type automatically tasks.json config file simplest data type required represent output type ID values across output types hub. data type values can used override automatic determination. Note attempting coerce output_type_id data type valid data (e.g. trying coerce\"character\" values \"double\") likely result error potentially unexpected behaviour use care. validations_cfg_path Path validations.yml file. NULL defaults hub-config/validations.yml. derived_task_ids Character vector derived task ID names (task IDs whose values depend task IDs) ignore. Columns task ids contain NAs.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_model_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the contents of a submitted model data file — validate_model_data","text":"object class hub_validations. named element contains hub_check class object reflecting result given check. Function return early check returns error. details structure <hub_validations> objects, including access information individual checks, see article <hub_validations> S3 class objects.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_model_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate the contents of a submitted model data file — validate_model_data","text":"Details checks performed validate_model_data()","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_model_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate the contents of a submitted model data file — validate_model_data","text":"","code":"hub_path <- system.file(\"testhubs/simple\", package = \"hubValidations\") file_path <- \"team1-goodmodel/2022-10-08-team1-goodmodel.csv\" validate_model_data(hub_path, file_path) #>  #> ── 2022-10-08-team1-goodmodel.csv ──── #>  #> ✔ [file_read]: File could be read successfully. #> ✔ [valid_round_id_col]: `round_id_col` name is valid. #> ✔ [unique_round_id]: `round_id` column \"origin_date\" contains a single, unique #>   round ID value. #> ✔ [match_round_id]: All `round_id_col` \"origin_date\" values match submission #>   `round_id` from file name. #> ✔ [colnames]: Column names are consistent with expected round task IDs and std #>   column names. #> ✔ [col_types]: Column data types match hub schema. #> ✔ [valid_vals]: `tbl` contains valid values/value combinations. #> ✔ [rows_unique]: All combinations of task ID #>   column/`output_type`/`output_type_id` values are unique. #> ✔ [req_vals]: Required task ID/output type/output type ID combinations all #>   present. #> ✔ [value_col_valid]: Values in column `value` all valid with respect to #>   modeling task config. #> ✔ [value_col_non_desc]: Values in `value` column are non-decreasing as #>   output_type_ids increase for all unique task ID value/output type #>   combinations of quantile or cdf output types. #> ℹ [value_col_sum1]: No pmf output types to check for sum of 1. Check skipped."},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_model_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Valid file level properties of a submitted model output file. — validate_model_file","title":"Valid file level properties of a submitted model output file. — validate_model_file","text":"Valid file level properties submitted model output file.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_model_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valid file level properties of a submitted model output file. — validate_model_file","text":"","code":"validate_model_file(hub_path, file_path, validations_cfg_path = NULL)"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_model_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Valid file level properties of a submitted model output file. — validate_model_file","text":"hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. file_path character string. Path file validated relative hub's model-output directory. validations_cfg_path Path validations.yml file. NULL defaults hub-config/validations.yml.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_model_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Valid file level properties of a submitted model output file. — validate_model_file","text":"object class hub_validations. named element contains hub_check class object reflecting result given check. Function return early check returns error. details structure <hub_validations> objects, including access information individual checks, see article <hub_validations> S3 class objects.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_model_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Valid file level properties of a submitted model output file. — validate_model_file","text":"Details checks performed validate_model_file()","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_model_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Valid file level properties of a submitted model output file. — validate_model_file","text":"","code":"hub_path <- system.file(\"testhubs/simple\", package = \"hubValidations\") validate_model_file(hub_path,   file_path = \"team1-goodmodel/2022-10-08-team1-goodmodel.csv\" ) #>  #> ── 2022-10-08-team1-goodmodel.csv ──── #>  #> ✔ [file_exists]: File exists at path #>   model-output/team1-goodmodel/2022-10-08-team1-goodmodel.csv. #> ✔ [file_name]: File name \"2022-10-08-team1-goodmodel.csv\" is valid. #> ✔ [file_location]: File directory name matches `model_id` metadata in file #>   name. #> ✔ [round_id_valid]: `round_id` is valid. #> ✔ [file_format]: File is accepted hub format. #> ✔ [file_n]: Number of accepted model output files per round met. #> ✔ [metadata_exists]: Metadata file exists at path #>   model-metadata/team1-goodmodel.yaml. validate_model_file(hub_path,   file_path = \"team1-goodmodel/2022-10-15-team1-goodmodel.csv\" ) #>  #> ── 2022-10-15-team1-goodmodel.csv ──── #>  #> ⓧ [file_exists]: File does not exist at path #>   model-output/team1-goodmodel/2022-10-15-team1-goodmodel.csv."},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_model_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Valid properties of a metadata file. — validate_model_metadata","title":"Valid properties of a metadata file. — validate_model_metadata","text":"Valid properties metadata file.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_model_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valid properties of a metadata file. — validate_model_metadata","text":"","code":"validate_model_metadata(   hub_path,   file_path,   round_id = \"default\",   validations_cfg_path = NULL )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_model_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Valid properties of a metadata file. — validate_model_metadata","text":"hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. file_path character string. Path file validated relative hub's model-output directory. round_id character string. round identifier. Used primarily indicate whether \"default\" round specific configuration used custom validations. validations_cfg_path Path validations.yml file. NULL defaults hub-config/validations.yml.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_model_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Valid properties of a metadata file. — validate_model_metadata","text":"object class hub_validations. named element contains hub_check class object reflecting result given check. Function return early check returns error.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_model_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Valid properties of a metadata file. — validate_model_metadata","text":"Details checks performed validate_model_metadata()","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_model_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Valid properties of a metadata file. — validate_model_metadata","text":"","code":"hub_path <- system.file(\"testhubs/simple\", package = \"hubValidations\") validate_model_metadata(hub_path,   file_path = \"hub-baseline.yml\" ) #>  #> ── model-metadata-schema.json ──── #>  #> ✔ [metadata_schema_exists]: File exists at path #>   hub-config/model-metadata-schema.json. #>  #> ── hub-baseline.yml ──── #>  #> ✔ [metadata_file_exists]: File exists at path model-metadata/hub-baseline.yml. #> ✔ [metadata_file_ext]: Metadata file extension is \"yml\" or \"yaml\". #> ✔ [metadata_file_location]: Metadata file directory name matches #>   \"model-metadata\". #> ✔ [metadata_matches_schema]: Metadata file contents are consistent with schema #>   specifications. #> ✔ [metadata_file_name]: Metadata file name matches the `model_id` specified #>   within the metadata file. validate_model_metadata(hub_path,   file_path = \"team1-goodmodel.yaml\" ) #>  #> ── model-metadata-schema.json ──── #>  #> ✔ [metadata_schema_exists]: File exists at path #>   hub-config/model-metadata-schema.json. #>  #> ── team1-goodmodel.yaml ──── #>  #> ✔ [metadata_file_exists]: File exists at path #>   model-metadata/team1-goodmodel.yaml. #> ✔ [metadata_file_ext]: Metadata file extension is \"yml\" or \"yaml\". #> ✔ [metadata_file_location]: Metadata file directory name matches #>   \"model-metadata\". #> ⓧ [metadata_matches_schema]: Metadata file contents must be consistent with #>   schema specifications.  - must have required property 'model_details' . - #>   must NOT have additional properties; saw unexpected property #>   'models_details'. - must NOT have additional properties; saw unexpected #>   property 'ensemble_of_hub_models\"'. - /include_ensemble must be boolean ."},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_pr.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Pull Request — validate_pr","title":"Validate Pull Request — validate_pr","text":"Validates model output model metadata files Pull Request.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_pr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Pull Request — validate_pr","text":"","code":"validate_pr(   hub_path = \".\",   gh_repo,   pr_number,   round_id_col = NULL,   output_type_id_datatype = c(\"from_config\", \"auto\", \"character\", \"double\", \"integer\",     \"logical\", \"Date\"),   validations_cfg_path = NULL,   skip_submit_window_check = FALSE,   file_modification_check = c(\"error\", \"failure\", \"warn\", \"message\", \"none\"),   allow_submit_window_mods = TRUE,   submit_window_ref_date_from = c(\"file\", \"file_path\"),   derived_task_ids = NULL )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_pr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Pull Request — validate_pr","text":"hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. gh_repo GitHub repository address format username/repo pr_number Number pull request validate round_id_col Character string. name column containing round_ids. required files contain column contains round_id details configured via round_id_from_variable: true round_id: hub tasks.json config file. output_type_id_datatype character string. One \"from_config\", \"auto\", \"character\", \"double\", \"integer\", \"logical\", \"Date\". Defaults \"from_config\" uses setting output_type_id_datatype property tasks.json config file available. property set config, argument falls back \"auto\" determines  output_type_id data type automatically tasks.json config file simplest data type required represent output type ID values across output types hub. data type values can used override automatic determination. Note attempting coerce output_type_id data type valid data (e.g. trying coerce\"character\" values \"double\") likely result error potentially unexpected behaviour use care. validations_cfg_path Path validations.yml file. NULL defaults hub-config/validations.yml. skip_submit_window_check Logical. Whether skip submission window check. file_modification_check Character string. Whether perform check return modification/deletion previously submitted model output file deletion previously submitted model metadata file detected PR: \"error\": Appends <error/check_error> condition class object applicable modified/deleted file. \"warning\": Appends <error/check_failure> condition class object applicable modified/deleted file. \"message\": Appends <message/check_info> condition class object applicable modified/deleted file. \"none\": modification/deletion checks performed. allow_submit_window_mods Logical. Whether allow modifications/deletions model output files within submission windows. Defaults TRUE. submit_window_ref_date_from whether get reference date around relative submission windows determined file's file_path round ID file contents . file requires file can read. applicable round configured determine submission windows relative value date column model output files. applicable explicit submission window start end dates provided hub's config. derived_task_ids Character vector derived task ID names (task IDs whose values depend task IDs) ignore. Columns task ids contain NAs.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_pr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Pull Request — validate_pr","text":"object class hub_validations.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_pr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Pull Request — validate_pr","text":"model output model metadata files individually validated using validate_submission() validate_model_metadata() respectively although part checks, hub config files also validated. files included PR ignored flagged message. default, modifications (include renaming) deletions previously submitted model output files deletions renaming previously submitted model metadata files allowed return <error/check_error> condition class object applicable modified/deleted file. behaviour can modified arguments file_modification_check, controls whether modification/deletion checks performed returned modifications/deletions detected, allow_submit_window_mods, controls whether modifications/deletions model output files allowed within submission windows. Note establish relative submission windows performing modification/deletion checks allow_submit_window_mods TRUE, reference date taken round_id extracted file path (.e. submit_window_ref_date_from always set \"file_path\"). extract dates columns deleted files. hub submission window reference dates match round IDs file paths, currently allow_submit_window_mods work correctly best set FALSE. relates hubs/rounds submission windows determined relative reference date explicit submission window start end dates provided config.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_pr.html","id":"checks-on-model-output-files","dir":"Reference","previous_headings":"","what":"Checks on model output files","title":"Validate Pull Request — validate_pr","text":"Details checks performed validate_submission()","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_pr.html","id":"checks-on-model-metadata-files","dir":"Reference","previous_headings":"","what":"Checks on model metadata files","title":"Validate Pull Request — validate_pr","text":"Details checks performed validate_model_metadata()","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_pr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Pull Request — validate_pr","text":"","code":"if (FALSE) { # \\dontrun{ validate_pr(   hub_path = \".\",   gh_repo = \"hubverse-org/ci-testhub-simple\",   pr_number = 3 ) } # }"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_submission.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a submitted model data file. — validate_submission","title":"Validate a submitted model data file. — validate_submission","text":"Checks file level properties like file name, extension, location etc well model output data, .e. contents file.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_submission.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a submitted model data file. — validate_submission","text":"","code":"validate_submission(   hub_path,   file_path,   round_id_col = NULL,   validations_cfg_path = NULL,   output_type_id_datatype = c(\"from_config\", \"auto\", \"character\", \"double\", \"integer\",     \"logical\", \"Date\"),   skip_submit_window_check = FALSE,   skip_check_config = FALSE,   submit_window_ref_date_from = c(\"file\", \"file_path\"),   derived_task_ids = NULL )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_submission.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a submitted model data file. — validate_submission","text":"hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. file_path character string. Path file validated relative hub's model-output directory. round_id_col Character string. name column containing round_ids. Usually, value round property round_id hub tasks.json config file. Defaults NULL determined config applicable. validations_cfg_path Path validations.yml file. NULL defaults hub-config/validations.yml. output_type_id_datatype character string. One \"from_config\", \"auto\", \"character\", \"double\", \"integer\", \"logical\", \"Date\". Defaults \"from_config\" uses setting output_type_id_datatype property tasks.json config file available. property set config, argument falls back \"auto\" determines  output_type_id data type automatically tasks.json config file simplest data type required represent output type ID values across output types hub. data type values can used override automatic determination. Note attempting coerce output_type_id data type valid data (e.g. trying coerce\"character\" values \"double\") likely result error potentially unexpected behaviour use care. skip_submit_window_check Logical. Whether skip submission window check. skip_check_config Logical. Whether skip hub config validation check. check. submit_window_ref_date_from whether get reference date around relative submission windows determined file's file_path round ID file contents . file requires file can read. applicable round configured determine submission windows relative value date column model output files. applicable explicit submission window start end dates provided hub's config. derived_task_ids Character vector derived task ID names (task IDs whose values depend task IDs) ignore. Columns task ids contain NAs.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_submission.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a submitted model data file. — validate_submission","text":"object class hub_validations. named element contains hub_check class object reflecting result given check. Function return early check returns error. details structure <hub_validations> objects, including access information individual checks, see article <hub_validations> S3 class objects.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_submission.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate a submitted model data file. — validate_submission","text":"Details checks performed validate_submission()","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_submission.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a submitted model data file. — validate_submission","text":"","code":"hub_path <- system.file(\"testhubs/simple\", package = \"hubValidations\") file_path <- \"team1-goodmodel/2022-10-08-team1-goodmodel.csv\" validate_submission(hub_path, file_path) #>  #> ── simple ──── #>  #> ✔ [valid_config]: All hub config files are valid. #>  #> ── 2022-10-08-team1-goodmodel.csv ──── #>  #> ✔ [file_exists]: File exists at path #>   model-output/team1-goodmodel/2022-10-08-team1-goodmodel.csv. #> ✔ [file_name]: File name \"2022-10-08-team1-goodmodel.csv\" is valid. #> ✔ [file_location]: File directory name matches `model_id` metadata in file #>   name. #> ✔ [round_id_valid]: `round_id` is valid. #> ✔ [file_format]: File is accepted hub format. #> ✔ [file_n]: Number of accepted model output files per round met. #> ✔ [metadata_exists]: Metadata file exists at path #>   model-metadata/team1-goodmodel.yaml. #> ✔ [file_read]: File could be read successfully. #> ✔ [valid_round_id_col]: `round_id_col` name is valid. #> ✔ [unique_round_id]: `round_id` column \"origin_date\" contains a single, unique #>   round ID value. #> ✔ [match_round_id]: All `round_id_col` \"origin_date\" values match submission #>   `round_id` from file name. #> ✔ [colnames]: Column names are consistent with expected round task IDs and std #>   column names. #> ✔ [col_types]: Column data types match hub schema. #> ✔ [valid_vals]: `tbl` contains valid values/value combinations. #> ✔ [rows_unique]: All combinations of task ID #>   column/`output_type`/`output_type_id` values are unique. #> ✔ [req_vals]: Required task ID/output type/output type ID combinations all #>   present. #> ✔ [value_col_valid]: Values in column `value` all valid with respect to #>   modeling task config. #> ✔ [value_col_non_desc]: Values in `value` column are non-decreasing as #>   output_type_ids increase for all unique task ID value/output type #>   combinations of quantile or cdf output types. #> ℹ [value_col_sum1]: No pmf output types to check for sum of 1. Check skipped. #> ✖ [submission_time]: Submission time must be within accepted submission window #>   for round.  Current time \"2024-11-06 19:34:51 UTC\" is outside window #>   2022-10-02 EDT--2022-10-09 23:59:59 EDT."},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_submission_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a submitted model data file submission time. — validate_submission_time","title":"Validate a submitted model data file submission time. — validate_submission_time","text":"Validate submitted model data file submission time.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_submission_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a submitted model data file submission time. — validate_submission_time","text":"","code":"validate_submission_time(   hub_path,   file_path,   ref_date_from = c(\"file_path\", \"file\") )"},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_submission_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a submitted model data file submission time. — validate_submission_time","text":"hub_path Either character string path local Modeling Hub directory object class <SubTreeFileSystem> created using functions s3_bucket() gs_bucket() providing string S3 GCS bucket name path Modeling Hub directory stored cloud. details consult Using cloud storage (S3, GCS) arrow package. hub must fully configured valid admin.json tasks.json files within hub-config directory. file_path character string. Path file validated relative hub's model-output directory. ref_date_from whether get reference date around relative submission windows determined file's file_path round ID file contents . file requires file can read. applicable round configured determine submission windows relative value date column model output files. applicable explicit submission window start end dates provided hub's config.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_submission_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a submitted model data file submission time. — validate_submission_time","text":"object class hub_validations. named element contains hub_check class object reflecting result given check. Function return early check returns error. details structure <hub_validations> objects, including access information individual checks, see article <hub_validations> S3 class objects.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/reference/validate_submission_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a submitted model data file submission time. — validate_submission_time","text":"","code":"hub_path <- system.file(\"testhubs/simple\", package = \"hubValidations\") file_path <- \"team1-goodmodel/2022-10-08-team1-goodmodel.csv\" validate_submission_time(hub_path, file_path) #>  #> ── 2022-10-08-team1-goodmodel.csv ──── #>  #> ✖ [submission_time]: Submission time must be within accepted submission window #>   for round.  Current time \"2024-11-06 19:34:52 UTC\" is outside window #>   2022-10-02 EDT--2022-10-09 23:59:59 EDT."},{"path":[]},{"path":"https://hubverse-org.github.io/hubValidations/dev/news/index.html","id":"hubvalidations-080","dir":"Changelog","previous_headings":"","what":"hubValidations 0.8.0","title":"hubValidations 0.8.0","text":"Custom checks longer fail validation run outside root hub (#141) Downgrade result missing model metadata file check check_error check_failure suppress early return case check failure validate_model_file() (#138). Add check_file_n() function validate number files submitted per round exceed allowed number submissions per team (#139). Ignore NAs relevant tbl columns opt_check_tbl_col_timediff() opt_check_tbl_horizon_timediff() checks ensure rows may targeting relevant modeling task cause false check failure. (#140).","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/news/index.html","id":"hubvalidations-071","dir":"Changelog","previous_headings":"","what":"hubValidations 0.7.1","title":"hubValidations 0.7.1","text":"new vignette create custom validation checks hub validations (#121) new section manage additional dependencies required custom validation functions (#22). ensure filenames composed letters, numbers, underscores (#132). added fine-grained check error messages identify portion file name errored.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/news/index.html","id":"hubvalidations-070","dir":"Changelog","previous_headings":"","what":"hubValidations 0.7.0","title":"hubValidations 0.7.0","text":"Added function create_custom_check() creating custom validation check function files templates (#121). Fixed bug check_tbl_values_required() causing required missing values identified correctly output types optional (#123)","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/news/index.html","id":"hubvalidations-062","dir":"Changelog","previous_headings":"","what":"hubValidations 0.6.2","title":"hubValidations 0.6.2","text":"Fixed bug check_tbl_col_types() columns model output data one class causing EXEC error (#118). Thanks bug report @ruarai!","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/news/index.html","id":"hubvalidations-061","dir":"Changelog","previous_headings":"","what":"hubValidations 0.6.1","title":"hubValidations 0.6.1","text":"Changed file name header colour hub_validations object print() method make visible lighter backgrounds. Soft deprecated file_modification_check argument \"warn\" option replaced \"failure\" validate_pr() function.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/news/index.html","id":"hubvalidations-060","dir":"Changelog","previous_headings":"","what":"hubValidations 0.6.0","title":"hubValidations 0.6.0","text":"✖ : check_failure class object. indicates error impact validation process. ⓧ : check_error class object. also indicates early termination validation process. ☒ : check_exec_error class object. indicates error execution check function. hub_validations class object combine() method now ensures check names made unique across hub_validations objects combined. Check results file validated now split printed file name header. check name can used access check result hub_validations object now included prefix check result message instead file name (#76). octolog dependency removed. removes annotation validation results onto GitHub Action workflow logs (#113).","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/news/index.html","id":"hubvalidations-051","dir":"Changelog","previous_headings":"","what":"hubValidations 0.5.1","title":"hubValidations 0.5.1","text":"Remove dependency development version arrow package bump required version 17.0.0.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/news/index.html","id":"hubvalidations-050","dir":"Changelog","previous_headings":"","what":"hubValidations 0.5.0","title":"hubValidations 0.5.0","text":"release introduces significant improvements performance submission validation via following changes: Add ability sub-set expanded valid value grids output type output_type argument expand_model_out_grid() (#98). Add ability ignore values derived task IDs expanded valid value grids argument derived_task_ids expand_model_out_grid(). Use sub-setting batching model output data validation output type appropriate lower level checks add ability ignore derived task IDs validate_model_data(), validate_submission() validate_pr(). changes allow creation smaller, focused expanded valid value grids, significantly reducing pressure memory working large, complex hub configs making submission validation much efficient. Additional useful functionality: Add ability subset output type ignore derived task IDs submission_tmpl(). Ignoring derived task ids can particularly useful avoid creating templates invalid derived task ID value combinations. Add new exported function match_tbl_to_model_task() matches rows tbl model output data model task given round (defined tasks.json).","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/news/index.html","id":"hubvalidations-040","dir":"Changelog","previous_headings":"","what":"hubValidations 0.4.0","title":"hubValidations 0.4.0","text":"Add new check_tbl_spl_compound_taskid_set() check function validate_model_data() ensures sample compound task id sets modeling task match coarser expected set defined tasks.json config. Add new get_tbl_compound_taskid_set() detecting sample compound task ID set submission data. Add argument compound_taskid_set expand_model_out_grid() submission_tmpl() allows users override compound task ID set creating sample indices output_type_id column samples.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/news/index.html","id":"hubvalidations-030","dir":"Changelog","previous_headings":"","what":"hubValidations 0.3.0","title":"hubValidations 0.3.0","text":"Introduce output_type_id_datatype argument validate_pr(), validate_submission(), validate_model_data() expand_model_out_grid() set default value \"from_config\". default means data type specified output_type_id_datatype property tasks.json (introduced schema version v3.0.1) used cast hub level output_type_id column data type. set config, functions fall back \"auto\" detects simplest data type can represent output type id values across output types rounds. argument also allows hub administrators override setting manually validation.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/news/index.html","id":"hubvalidations-020","dir":"Changelog","previous_headings":"","what":"hubValidations 0.2.0","title":"hubValidations 0.2.0","text":"Move rename following hubData functions hubValidations: hubData::expand_model_out_val_grid expand_model_out_grid. hubData::create_model_out_submit_tmpl submission_tmpl.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/news/index.html","id":"hubvalidations-010","dir":"Changelog","previous_headings":"","what":"hubValidations 0.1.0","title":"hubValidations 0.1.0","text":"Support validation v3 schema sample submissions.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/news/index.html","id":"hubvalidations-001","dir":"Changelog","previous_headings":"","what":"hubValidations 0.0.1","title":"hubValidations 0.0.1","text":"Release stable 0.0.1 version Enforce minimum dependence latest hubData (0.1.0) & hubAdmin (0.1.0). allows successful validation submissions hubs multiple model tasks, given model task might contain non relevant task IDs required optional properties set null tasks.json (#75). See relevant section hubDocs documentation details. Improve formatting current time print validate_submission_time() message removing decimal seconds including local time zone.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/news/index.html","id":"hubvalidations-0009008","dir":"Changelog","previous_headings":"","what":"hubValidations 0.0.0.9008","title":"hubValidations 0.0.0.9008","text":"structure <hub_validations> class objects. Validating Pull Requests Github (admins). Validating Submissions locally (teams). Added tables details individual checks performed high level validate_*() function documentation. Fixed bug check values value column non-decreasing output_type_ids increase unique task ID /output type value combinations cdf quantile output types erroneously returning validation errors output_type_id column ordered. (Thanks @M-7th).","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/news/index.html","id":"hubvalidations-0009007","dir":"Changelog","previous_headings":"","what":"hubValidations 0.0.0.9007","title":"hubValidations 0.0.0.9007","text":"file_modification_check, controls whether modification/deletion checks performed returned modifications/deletions detected. allow_submit_window_mods, controls whether modifications/deletions model output files allowed within submission windows.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/news/index.html","id":"hubvalidations-0009006","dir":"Changelog","previous_headings":"","what":"hubValidations 0.0.0.9006","title":"hubValidations 0.0.0.9006","text":"validate_pr() now checks deletions previously submitted model metadata files modifications deletions previously submitted model output files, adding <error/check_error> class object function output detected modified/deleted file (#43 & #44).","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/news/index.html","id":"hubvalidations-0009005","dir":"Changelog","previous_headings":"","what":"hubValidations 0.0.0.9005","title":"hubValidations 0.0.0.9005","text":"Improved handling numeric output type IDs (including high precision floating points / values trailing zeros), especially overall hub output type ID column character. previously lead number bugs false validation failures (#58 & #54) addressed version. Bug fixes respect handling modelling tasks required task ID / output type combinations. Improved capture error messages check execution error occurs.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/news/index.html","id":"hubvalidations-0009004","dir":"Changelog","previous_headings":"","what":"hubValidations 0.0.0.9004","title":"hubValidations 0.0.0.9004","text":"release contains bug fix reading validating CSV column types correctly. (#54)","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/news/index.html","id":"hubvalidations-0009003","dir":"Changelog","previous_headings":"","what":"hubValidations 0.0.0.9003","title":"hubValidations 0.0.0.9003","text":"release includes number bug fixes: - Deployment custom/optional functions via validations.yml can now accessed directly form pkg namespace, addressing bug required pkg library loaded. (#51) - Use .equal check sums pmf probabilities equal 1. (#52)","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/news/index.html","id":"hubvalidations-0009002","dir":"Changelog","previous_headings":"","what":"hubValidations 0.0.0.9002","title":"hubValidations 0.0.0.9002","text":"release includes improvements designed first round sandbox testing setting CDC FluSight hub. Improvements include: Export parse_file_name function parsing model output metadata model output file name. Issue specific informative messaging check_tbl_values() check fails. Adding verbose option check_for_errors() function prints results checks addition deafult overall result subset failed checks.","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/news/index.html","id":"hubvalidations-0009001","dir":"Changelog","previous_headings":"","what":"hubValidations 0.0.0.9001","title":"hubValidations 0.0.0.9001","text":"Release first draft hubValidations package","code":""},{"path":"https://hubverse-org.github.io/hubValidations/dev/news/index.html","id":"hubvalidations-0009000","dir":"Changelog","previous_headings":"","what":"hubValidations 0.0.0.9000","title":"hubValidations 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
